[
["index.html", "Targeted Learning with the tlverse Software Ecosystem Workshop, 20 February 2020, Conference on Statistical Practice Preface Important links About this workshop Outline About the instructors and authors", " Targeted Learning with the tlverse Software Ecosystem Workshop, 20 February 2020, Conference on Statistical Practice Mark van der Laan, Alan Hubbard, Jeremy Coyle, Nima Hejazi, Ivana Malenica, Rachael Phillips updated: February 20, 2020 Preface This is an open source and fully-reproducible electronic vignette for an invited short-course on applying the targeted learning methodology in practice using the tlverse software ecosystem, given at the Conference on Statistical Practice (CSP) on 20 February 2020. The Hitchhiker’s Guide to the tlverse, or a Targeted Learning Practitioner’s Handbook is an in-draft book covering the same topics in greater detail and may serve as a useful accompanying resource to these workshop materials. Important links Software installation: Please install the relevant software before the workshop using the installation script. You will probably exceed the GitHub API rate limit during this installation, which will throw an error. This issue and the solution are addressed here. Code: R script files for each section of the workshop are available via the GitHub repository for the short course at https://github.com/tlverse/csp2020-workshop/tree/master/R About this workshop This 1-day workshop will provide a comprehensive introduction to the field of Targeted Learning and the corresponding tlverse software ecosystem. In particular, we will focus on targeted minimum loss estimators of causal effects, including those of static and dynamic treatments (as well as those of optimal dynamic and stochastic interventions, time permitting). These multiply robust, efficient plug-in estimators use state-of-the-art, ensemble machine learning tools to flexibly adjust for confounding while yielding valid statistical inference. We will discuss the utility of this robust estimation strategy in comparison to conventional techniques, which often rely on restrictive statistical models and may therefore lead to severely biased inference. In addition to discussion, this workshop will incorporate both interactive activities and hands-on, guided R programming exercises, to allow participants the opportunity to familiarize themselves with methodology and tools that will translate to real-world causal inference analyses. It is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. Outline 8:00-10:00A: Introductory Presentation and Discussion 10:00-10:15A: Break 10:15A-10:45A: Introduction to the tlverse 10:45A-11:15A: Introduction to R6 11:15A-11:30P: Overview of Example Datasets 11:30A-12:00P: tlverse Software Installation 12:00P-1:00P: Lunch 1:00-3:00P: Super (Machine) Learning with the sl3 R package 3:00-3:15P: Break 03:15-05:00P: Targeted Maximum Likelihood Estimation (TMLE) with the tmle3 R package About the instructors and authors Mark van der Laan Mark van der Laan, Ph.D., is Professor of Biostatistics and Statistics at UC Berkeley. His research interests include statistical methods in computational biology, survival analysis, censored data, adaptive designs, targeted maximum likelihood estimation, causal inference, data-adaptive loss-based learning, and multiple testing. His research group developed loss-based super learning in semiparametric models, based on cross-validation, as a generic optimal tool for the estimation of infinite-dimensional parameters, such as nonparametric density estimation and prediction with both censored and uncensored data. Building on this work, his research group developed targeted maximum likelihood estimation for a target parameter of the data-generating distribution in arbitrary semiparametric and nonparametric models, as a generic optimal methodology for statistical and causal inference. Most recently, Mark’s group has focused in part on the development of a centralized, principled set of software tools for targeted learning, the tlverse. For more information, see https://vanderlaan-lab.org. Jeremy Coyle Jeremy Coyle, Ph.D., is a consulting data scientist and statistical programmer, currently leading the software development effort that has produced the tlverse ecosystem of R packages and related software tools. Jeremy earned his Ph.D. in Biostatistics from UC Berkeley in 2016, primarily under the supervision of Alan Hubbard. Alan Hubbard Alan Hubbard, Ph.D., is Professor of Biostatistics, former head of the Division of Biostatistics at UC Berkeley, and head of data analytics core at UC Berkeley’s SuperFund research program. His current research interests include causal inference, variable importance analysis, statistical machine learning, estimation of and inference for data-adaptive statistical target parameters, and targeted minimum loss-based estimation. Research in his group is generally motivated by applications to problems in computational biology, epidemiology, and precision medicine. Nima Hejazi Nima is a Ph.D. candidate in biostatistics with a designated emphasis in computational and genomic biology, working with Mark van der Laan and Alan Hubbard. Nima is affiliated with UC Berkeley’s Center for Computational Biology and is a former NIH Biomedical Big Data fellow. He earned is Master’s in Biostatistics (2017) and a Bachelor’s with a triple major in Molecular and Cell Biology (Neurobiology), Psychology, and Public Health (2015) at UC Berkeley. Nima’s interests span nonparametric estimation, high-dimensional inference, targeted learning, statistical computing, survival analysis, and computational biology, with an emphasis on the development of robust and efficient statistical methodologies that draw on the intersection of causal inference and statistical machine learning. For more information, see https://nimahejazi.org. Ivana Malenica Ivana is a Ph.D. student in biostatistics advised by Mark van der Laan. Ivana is currently a fellow at the Berkeley Institute for Data Science, after serving as a NIH Biomedical Big Data and Freeport-McMoRan Genomic Engine fellow. She earned her Master’s in Biostatistics and Bachelor’s in Mathematics, and spent some time at the Translational Genomics Research Institute. Very broadly, her research interests span non/semi-parametric theory, probability theory, machine learning, causal inference and high-dimensional statistics. Most of her current work involves complex dependent settings (dependence through time and network) and adaptive sequential designs. Rachael Phillips Rachael is a Ph.D. student in biostatistics, advised by Alan Hubbard and Mark van der Laan. She has an M.A. in Biostatistics, B.S. in Biology with a Chemistry minor and a B.A. in Mathematics with a Spanish minor. Rachael’s research focuses on narrowing the gap between the theory and application of modern statistics for real-world data science. Specifically, Rachael is motivated by issues arising in healthcare, and she leverages strategies rooted in causal inference and nonparametric estimation to build clinician-tailored, machine-driven solutions. Rachael is also passionate about free, online-mediated education and its corresponding pedagogy. "],
["motivation.html", "Motivation", " Motivation “One enemy of robust science is our humanity — our appetite for being right, and our tendency to find patterns in noise, to see supporting evidence for what we already believe is true, and to ignore the facts that do not fit.” — Nature Editorial (2015b) Scientific research is at a unique point in history. The need to improve rigor and reproducibility in our field is greater than ever; corroboration moves science forward, yet there is a growing alarm about results that cannot be reproduced and that report false discoveries (Baker 2016). Consequences of not meeting this need will result in further decline in the rate of scientific progression, the reputation of the sciences, and the public’s trust in its findings (Munafò et al. 2017; Nature Editorial 2015a). “The key question we want to answer when seeing the results of any scientific study is whether we can trust the data analysis.” — Peng (2015) Unfortunately, at its current state the culture of data analysis and statistics actually enables human bias through improper model selection. All hypothesis tests and estimators are derived from statistical models, so to obtain valid estimates and inference it is critical that the statistical model contains the process that generated the data. Perhaps treatment was randomized or only depended on a small number of baseline covariates; this knowledge should and can be incorporated in the model. Alternatively, maybe the data is observational, and there is no knowledge about the data-generating process (DGP). If this is the case, then the statistical model should contain all data distributions. In practice; however, models are not selected based on knowledge of the DGP, instead models are often selected based on (1) the p-values they yield, (2) their convenience of implementation, and/or (3) an analysts loyalty to a particular model. This practice of “cargo-cult statistics — the ritualistic miming of statistics rather than conscientious practice,” (Stark and Saltelli 2018) is characterized by arbitrary modeling choices, even though these choices often result in different answers to the same research question. That is, “increasingly often, [statistics] is used instead to aid and abet weak science, a role it can perform well when used mechanically or ritually,” as opposed to its original purpose of safeguarding against weak science (Stark and Saltelli 2018). This presents a fundamental drive behind the epidemic of false findings that scientific research is suffering from (van der Laan and Starmans 2014). “We suggest that the weak statistical understanding is probably due to inadequate”statistics lite&quot; education. This approach does not build up appropriate mathematical fundamentals and does not provide scientifically rigorous introduction into statistics. Hence, students’ knowledge may remain imprecise, patchy, and prone to serious misunderstandings. What this approach achieves, however, is providing students with false confidence of being able to use inferential tools whereas they usually only interpret the p-value provided by black box statistical software. While this educational problem remains unaddressed, poor statistical practices will prevail regardless of what procedures and measures may be favored and/or banned by editorials.&quot; — Szucs and Ioannidis (2017) Our team at The University of California, Berkeley, is uniquely positioned to provide such an education. Spearheaded by Professor Mark van der Laan, and spreading rapidly by many of his students and colleagues who have greatly enriched the field, the aptly named “Targeted Learning” methodology targets the scientific question at hand and is counter to the current culture of “convenience statistics” which opens the door to biased estimation, misleading results, and false discoveries. Targeted Learning restores the fundamentals that formalized the field of statistics, such as the that facts that a statistical model represents real knowledge about the experiment that generated the data, and a target parameter represents what we are seeking to learn from the data as a feature of the distribution that generated it (van der Laan and Starmans 2014). In this way, Targeted Learning defines a truth and establishes a principled standard for estimation, thereby inhibiting these all-too-human biases (e.g., hindsight bias, confirmation bias, and outcome bias) from infiltrating analysis. “The key for effective classical [statistical] inference is to have well-defined questions and an analysis plan that tests those questions.” — Nosek et al. (2018) Our objective is to provide training to students, researchers, industry professionals, faculty in science, public health, statistics, and other fields to empower them with the necessary knowledge and skills to utilize the sound methodology of Targeted Learning — a technique that provides tailored pre-specified machines for answering queries, so that each data analysis is completely reproducible, and estimators are efficient, minimally biased, and provide formal statistical inference. Just as the conscientious use of modern statistical methodology is necessary to ensure that scientific practice thrives, it remains critical to acknowledge the role that robust software plays in allowing practitioners direct access to published results. We recall that “an article…in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures,” thus making the availability and adoption of robust statistical software key to enhancing the transparency that is an inherent aspect of science (Buckheit and Donoho 1995). For a statistical methodology to be readily accessible in practice, it is crucial that it is accompanied by robust user-friendly software (Pullenayegum et al. 2016; Stromberg and others 2004). The tlverse software ecosystem was developed to fulfill this need for the Targeted Learning methodology. Not only does this software facilitate computationally reproducible and efficient analyses, it is also a tool for Targeted Learning education since its workflow mirrors that of the methodology. In particular, the tlverse paradigm does not focus on implementing a specific estimator or a small set of related estimators. Instead, the focus is on exposing the statistical framework of Targeted Learning itself — all R packages in the tlverse ecosystem directly model the key objects defined in the mathematical and theoretical framework of Targeted Learning. What’s more, the tlverse R packages share a core set of design principles centered on extensibility, allowing for them to be used in conjunction with each other and built upon one other in a cohesive fashion. In this workshop, the reader will embark on a journey through the tlverse ecosystem. Guided by R programming exercises, case studies, and intuitive explanation readers will build a toolbox for applying the Targeted Learning statistical methodology, which will translate to real-world causal inference analyses. Participants need not be a fully trained statistician to begin understanding and applying these methods. However, it is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. We also recommend an understanding of introductory causal inference. For introductory materials for learning the R programming language we recommend the following free resources: Software Carpentry’s Programming with R Software Carpentry’s R for Reproducible Scientific Analysis Grolemund and Wickham’s R for Data Science For causal inference learning materials we recommend the following resources: Hernán MA, Robins JM (2019). Causal Inference. Jason A. Roy’s coursera Course A Crash Course in Causality: Inferring Causal Effects from Observational Data References "],
["tlverse.html", "Chapter 1 Welcome to the tlverse 1.1 Learning Objectives 1.2 What is the tlverse? 1.3 tlverse components 1.4 Installation", " Chapter 1 Welcome to the tlverse 1.1 Learning Objectives Understand the tlverse ecosystem conceptually Identify the core components of the tlverse Install tlverse R packages Understand the Targeted Learning roadmap Learn about the WASH Benefits example data 1.2 What is the tlverse? The tlverse is a new framework for doing Targeted Learning in R, inspired by the tidyverse ecosystem of R packages. By analogy to the tidyverse: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. So, the tlverse is an opinionated collection of R packages for Targeted Learning sharing an underlying philosophy, grammar, and set of data structures 1.3 tlverse components These are the main packages that represent the core of the tlverse: sl3: Modern Super Learning with Pipelines What? A modern object-oriented re-implementation of the Super Learner algorithm, employing recently developed paradigms for R programming. Why? A design that leverages modern tools for fast computation, is forward-looking, and can form one of the cornerstones of the tlverse. tmle3: An Engine for Targeted Learning What? A generalized framework that simplifies Targeted Learning by identifying and implementing a series of common statistical estimation procedures. Why? A common interface and engine that accommodates current algorithmic approaches to Targeted Learning and is still flexible enough to remain the engine even as new techniques are developed. In addition to the engines that drive development in the tlverse, there are some supporting packages – in particular, we have two… origami: A Generalized Framework for Cross-Validation What? A generalized framework for flexible cross-validation Why? Cross-validation is a key part of ensuring error estimates are honest and preventing overfitting. It is an essential part of the both the Super Learner algorithm and Targeted Learning. delayed: Parallelization Framework for Dependent Tasks What? A framework for delayed computations (futures) based on task dependencies. Why? Efficient allocation of compute resources is essential when deploying large-scale, computationally intensive algorithms. A key principle of the tlverse is extensibility. That is, we want to support new Targeted Learning estimators as they are developed. The model for this is new estimators are implemented in additional packages using the core packages above. There are currently two featured examples of this: tmle3mopttx: Optimal Treatments in tlverse What? Learn an optimal rule and estimate the mean outcome under the rule Why? Optimal Treatment is a powerful tool in precision healthcare and other settings where a one-size-fits-all treatment approach is not appropriate. tmle3shift: Shift Interventions in tlverse What? Shift interventions for continuous treatments Why? Not all treatment variables are discrete. Being able to estimate the effects of continuous treatment represents a powerful extension of the Targeted Learning approach. 1.4 Installation The tlverse ecosystem of packages are currently hosted at https://github.com/tlverse, not yet on CRAN. You can use the devtools package to install them: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tlverse/tlverse&quot;) The tlverse depends on a large number of other packages that are also hosted on GitHub. Because of this, you may see the following error: Error: HTTP error 403. API rate limit exceeded for 71.204.135.82. (But here&#39;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) Rate limit remaining: 0/60 Rate limit reset at: 2019-03-04 19:39:05 UTC To increase your GitHub API rate limit - Use `usethis::browse_github_pat()` to create a Personal Access Token. - Use `usethis::edit_r_environ()` and add the token as `GITHUB_PAT`. This just means that R tried to install too many packages from GitHub in too short of a window. To fix this, you need to tell R how to use GitHub as your user (you’ll need a GitHub user account). Follow these two steps: Type usethis::browse_github_pat() in your R console, which will direct you to GitHub’s page to create a New Personal Access Token. Create a Personal Access Token simply by clicking “Generate token” at the bottom of the page. Copy your Personal Access Token, a long string of lowercase letters and numbers. Type usethis::edit_r_environ() in your R console, which will open your .Renviron file in the source window of RStudio. If you are not able to access your .Renviron file with this command, then try inputting Sys.setenv(GITHUB_PAT = ) with your Personal Access Token inserted as a string after the equals symbol; and if this does not error, then skip to step 8. In your .Renviron file, type GITHUB_PAT= and then paste your Personal Access Token after the equals symbol with no space. In your .Renviron file, press the enter key to ensure that your .Renviron ends with a newline. Save your .Renviron file. Restart R for changes to take effect. You can restart R via the drop-down menu on the “Session” tab. The “Session” tab is at the top of the RStudio interface. After following these steps, you should be able to successfully install the package which threw the error above. "],
["intro.html", "Chapter 2 The Roadmap for Targeted Learning 2.1 Learning Objectives 2.2 Introduction 2.3 The Roadmap 2.4 Summary of the Roadmap 2.5 Causal Target Parameters 2.6 The WASH Benefits Example Dataset", " Chapter 2 The Roadmap for Targeted Learning 2.1 Learning Objectives By the end of this chapter you will be able to: Translate scientific questions to statistical questions. Define a statistical model based on the knowledge of the experiment that generated the data. Identify a causal parameter as a function of the observed data distribution. Explain the following causal and statistical assumptions and their implications: i.i.d., consistency, interference, positivity, SUTVA. 2.2 Introduction The roadmap of statistical learning is concerned with the translation from real-world data applications to a mathematical and statistical formulation of the relevant estimation problem. This involves data as a random variable having a probability distribution, scientific knowledge represented by a statistical model, a statistical target parameter representing an answer to the question of interest, and the notion of an estimator and sampling distribution of the estimator. 2.3 The Roadmap Following the roadmap is a process of five stages. Data as a random variable with a probability distribution, \\(O \\sim P_0\\). The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\). The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\). The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\). A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\). (1) Data as a random variable with a probability distribution, \\(O \\sim P_0\\) The data set we’re confronted with is the result of an experiment and we can view the data as a random variable, \\(O\\), because if we repeat the experiment we would have a different realization of this experiment. In particular, if we repeat the experiment many times we could learn the probability distribution, \\(P_0\\), of our data. So, the observed data \\(O\\) with probability distribution \\(P_0\\) are \\(n\\) independent identically distributed (i.i.d.) observations of the random variable \\(O; O_1, \\ldots, O_n\\). Note that while not all data are i.i.d., there are ways to handle non-i.i.d. data, such as establishing conditional independence, stratifying data to create sets of identically distributed data, etc. It is crucial that researchers be absolutely clear about what they actually know about the data-generating distribution for a given problem of interest. Unfortunately, communication between statisticians and researchers is often fraught with misinterpretation. The roadmap provides a mechanism by which to ensure clear communication between research and statistician – it truly helps with this communication! The empirical probability measure, \\(P_n\\) Once we have \\(n\\) of such i.i.d. observations we have an empirical probability measure, \\(P_n\\). The empirical probability measure is an approximation of the true probability measure \\(P_0\\), allowing us to learn from our data. For example, we can define the empirical probability measure of a set, \\(A\\), to be the proportion of observations which end up in \\(A\\). That is, \\[\\begin{equation*} P_n(A) = \\frac{1}{n}\\sum_{i=1}^{n} \\mathbb{I}(O_i \\in A) \\end{equation*}\\] In order to start learning something, we need to ask “What do we know about the probability distribution of the data?” This brings us to Step 2. (2) The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\) The statistical model \\(\\mathcal{M}\\) is defined by the question we asked at the end of . It is defined as the set of possible probability distributions for our observed data. Often \\(\\mathcal{M}\\) is very large (possibly infinite-dimensional), to reflect the fact that statistical knowledge is limited. In the case that \\(\\mathcal{M}\\) is infinite-dimensional, we deem this a nonparametric statistical model. Alternatively, if the probability distribution of the data at hand is described by a finite number of parameters, then the statistical model is parametric. In this case, we prescribe to the belief that the random variable \\(O\\) being observed has, e.g., a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\). More formally, a parametric model may be defined \\[\\begin{equation*} \\mathcal{M} = \\{P_{\\theta} : \\theta \\in \\mathcal{R}^d \\} \\end{equation*}\\] Sadly, the assumption that the data-generating distribution has a specific, parametric forms is all-too-common, even when such is a leap of faith. This practice of oversimplification in the current culture of data analysis typically derails any attempt at trying to answer the scientific question at hand; alas, such statements as the ever-popular quip of Box that “All models are wrong but some are useful,” encourage the data analyst to make arbitrary choices even when that often force significant differences in answers to the same estimation problem. The Targeted Learning paradigm does not suffer from this bias since it defines the statistical model through a representation of the true data-generating distribution corresponding to the observed data. Now, on to Step 3: ``What are we trying to learn from the data?&quot; (3) The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\) The statistical target parameter, \\(\\Psi\\), is defined as a mapping from the statistical model, \\(\\mathcal{M}\\), to the parameter space (i.e., a real number) \\(\\mathcal{R}\\). That is, \\(\\Psi: \\mathcal{M}\\rightarrow\\mathbb{R}\\). The target parameter may be seen as a representation of the quantity that we wish to learn from the data, the answer to a well-specified (often causal) question of interest. In contrast to purely statistical target parameters, causal target parameters require identification from the observed data, based on causal models that include several untestable assumptions, described in more detail in the section on causal target parameters. For a simple example, consider a data set which contains observations of a survival time on every subject, for which our question of interest is “What’s the probability that someone lives longer than five years?” We have, \\[\\begin{equation*} \\Psi(P_0) = \\mathbb{P}(O &gt; 5) \\end{equation*}\\] This answer to this question is the estimand, \\(\\Psi(P_0)\\), which is the quantity we’re trying to learn from the data. Once we have defined \\(O\\), \\(\\mathcal{M}\\) and \\(\\Psi(P_0)\\) we have formally defined the statistical estimation problem. (4) The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\) To obtain a good approximation of the estimand, we need an estimator, an a priori-specified algorithm defined as a mapping from the set of possible empirical distributions, \\(P_n\\), which live in a non-parametric statistical model, \\(\\mathcal{M}_{NP}\\) (\\(P_n \\in \\mathcal{M}_{NP}\\)), to the parameter space of the parameter of interest. That is, \\(\\hat{\\Psi} : \\mathcal{M}_{NP} \\rightarrow \\mathbb{R}^d\\). The estimator is a function that takes as input the observed data, a realization of \\(P_n\\), and gives as output a value in the parameter space, which is the estimate, \\(\\hat{\\Psi}(P_n)\\). Where the estimator may be seen as an operator that maps the observed data and corresponding empirical distribution to a value in the parameter space, the numerical output that produced such a function is the estimate. Thus, it is an element of the parameter space based on the empirical probability distribution of the observed data. If we plug in a realization of \\(P_n\\) (based on a sample size \\(n\\) of the random variable \\(O\\)), we get back an estimate \\(\\hat{\\Psi}(P_n)\\) of the true parameter value \\(\\Psi(P_0)\\). In order to quantify the uncertainty in our estimate of the target parameter (i.e., to construct statistical inference), an understanding of the sampling distribution of our estimator will be necessary. This brings us to Step 5. (5) A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\) Since the estimator \\(\\hat{\\Psi}\\) is a function of the empirical distribution \\(P_n\\), the estimator itself is a random variable with a sampling distribution. So, if we repeat the experiment of drawing \\(n\\) observations we would every time end up with a different realization of our estimate and our estimator has a sampling distribution. The sampling distribution of an estimator can be theoretically validated to be approximately normally distributed by a Central Limit Theorem (CLT). A class of Central Limit Theorems (CLTs) are statements regarding the convergence of the sampling distribution of an estimator to a normal distribution. In general, we will construct estimators whose limit sampling distributions may be shown to be approximately normal distributed as sample size increases. For large enough \\(n\\) we have, \\[\\begin{equation*} \\hat{\\Psi}(P_n) \\sim N \\left(\\Psi(P_0), \\frac{\\sigma^2}{n}\\right), \\end{equation*}\\] permitting statistical inference. Now, we can proceed to quantify the uncertainty of our chosen estimator by construction of hypothesis tests and confidence intervals. For example, we may construct a confidence interval at level \\((1 - \\alpha)\\) for our estimand, \\(\\Psi(P_0)\\): \\[\\begin{equation*} \\hat{\\Psi}(P_n) \\pm z_{1 - \\frac{\\alpha}{2}} \\left(\\frac{\\sigma}{\\sqrt{n}}\\right), \\end{equation*}\\] where \\(z_{1 - \\frac{\\alpha}{2}}\\) is the \\((1 - \\frac{\\alpha}{2})^\\text{th}\\) quantile of the standard normal distribution. Often, we will be interested in constructing 95% confidence intervals, corresponding to mass \\(\\alpha = 0.05\\) in either tail of the limit distribution; thus, we will typically take \\(z_{1 - \\frac{\\alpha}{2}} \\approx 1.96\\). Note: we will typically have to estimate the standard error, \\(\\frac{\\sigma}{\\sqrt{n}}\\). A 95% confidence interval means that if we were to take 100 different samples of size \\(n\\) and compute a 95% confidence interval for each sample then approximately 95 of the 100 confidence intervals would contain the estimand, \\(\\Psi(P_0)\\). More practically, this means that there is a 95% probability (or 95% confidence) that the confidence interval procedure will contain the true estimand. However, any single estimated confidence interval either will contain the true estimand or will not. 2.4 Summary of the Roadmap Data, \\(O\\), is viewed as a random variable that has a probability distribution. We often have \\(n\\) units of independent identically distributed units with probability distribution \\(P_0\\) (\\(O_1, \\ldots, O_n \\sim P_0\\)). We have statistical knowledge about the experiment that generated this data. In other words, we make a statement that the true data distribution \\(P_0\\) falls in a certain set called a statistical model, \\(\\mathcal{M}\\). Often these sets are very large because statistical knowledge is very limited so these statistical models are often infinite dimensional models. Our statistical query is, “What are we trying to learn from the data?” denoted by the statistical target parameter, \\(\\Psi\\), which maps the \\(P_0\\) into the estimand, \\(\\Psi(P_0)\\). At this point the statistical estimation problem is formally defined and now we will need statistical theory to guide us in the construction of estimators. There’s a lot of statistical theory we will review in this course that, in particular, relies on the Central Limit Theorem, allowing us to come up with estimators that are approximately normally distributed and also allowing us to come with statistical inference (i.e., confidence intervals and hypothesis tests). 2.5 Causal Target Parameters 2.5.1 The Causal Model After formalizing the data and the statistical model, we can define a causal model to express causal parameters of interest. Directed acyclic graphs (DAGs) are one useful tool to express what we know about the causal relations among variables. Ignoring exogenous \\(U\\) terms (explained below), we assume the following ordering of the variables in the observed data \\(O\\). While directed acyclic graphs (DAGs) like above provide a convenient means by which to visualize causal relations between variables, the same causal relations among variables can be represented via a set of structural equations, which define the non-parametric structural equation model (NPSEM): \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(W, A, U_Y), \\end{align*}\\] where \\(U_W\\), \\(U_A\\), and \\(U_Y\\) represent the unmeasured exogenous background characteristics that influence the value of each variable. In the NPSEM, \\(f_W\\), \\(f_A\\) and \\(f_Y\\) denote that each variable (for \\(W\\), \\(A\\) and \\(Y\\), respectively) is a function of its parents and unmeasured background characteristics, but note that there is no imposition of any particular functional constraints(e.g., linear, logit-linear, only one interaction, etc.). For this reason, they are called non-parametric structural equation models (NPSEMs). The DAG and set of nonparametric structural equations represent exactly the same information and so may be used interchangeably. The first hypothetical experiment we will consider is assigning exposure to the whole population and observing the outcome, and then assigning no exposure to the whole population and observing the outcome. On the nonparametric structural equations, this corresponds to a comparison of the outcome distribution in the population under two interventions: \\(A\\) is set to \\(1\\) for all individuals, and \\(A\\) is set to \\(0\\) for all individuals. These interventions imply two new nonparametric structural equation models. For the case \\(A = 1\\), we have \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 1 \\\\ Y(1) &amp;= f_Y(W, 1, U_Y), \\end{align*}\\] and for the case \\(A=0\\), \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 0 \\\\ Y(0) &amp;= f_Y(W, 0, U_Y). \\end{align*}\\] In these equations, \\(A\\) is no longer a function of \\(W\\) because we have intervened on the system, setting \\(A\\) deterministically to either of the values \\(1\\) or \\(0\\). The new symbols \\(Y(1)\\) and \\(Y(0)\\) indicate the outcome variable in our population if it were generated by the respective NPSEMs above; these are often called counterfactuals (since they run contrary-to-fact). The difference between the means of the outcome under these two interventions defines a parameter that is often called the “average treatment effect” (ATE), denoted \\[\\begin{equation}\\label{eqn:ate} ATE = \\mathbb{E}_X(Y(1)-Y(0)), \\end{equation}\\] where \\(\\mathbb{E}_X\\) is the mean under the theoretical (unobserved) full data \\(X = (W, Y(1), Y(0))\\). Note, we can define much more complicated interventions on NPSEM’s, such as interventions based upon rules (themselves based upon covariates), stochastic rules, etc. and each results in a different targeted parameter and entails different identifiability assumptions discussed below. 2.5.2 Identifiability Because we can never observe both \\(Y(0)\\) (the counterfactual outcome when \\(A=0\\)) and \\(Y(1)\\) (similarly, the counterfactual outcome when \\(A=1\\)), we cannot estimate directly. Instead, we have to make assumptions under which this quantity may be estimated from the observed data \\(O \\sim P_0\\) under the data-generating distribution \\(P_0\\). Fortunately, given the causal model specified in the NPSEM above, we can, with a handful of untestable assumptions, estimate the ATE, even from observational data. These assumptions may be summarized as follows The causal graph implies \\(Y(a) \\perp A\\) for all \\(a \\in \\mathcal{A}\\), which is the randomization assumption. In the case of observational data, the analogous assumption is strong ignorability or no unmeasured confounding \\(Y(a) \\perp A \\mid W\\) for all \\(a \\in \\mathcal{A}\\); Although not represented in the causal graph, also required is the assumption of no interference between units, that is, the outcome for unit \\(i\\) \\(Y_i\\) is not affected by exposure for unit \\(j\\) \\(A_j\\) unless \\(i=j\\); Consistency of the treatment mechanism is also required, i.e., the outcome for unit \\(i\\) is \\(Y_i(a)\\) whenever \\(A_i = a\\), an assumption also known as “no other versions of treatment”; It is also necessary that all observed units, across strata defined by \\(W\\), have a bounded (non-deterministic) probability of receiving treatment – that is, \\(0 &lt; \\mathbb{P}(A = a \\mid W) &lt; 1\\) for all \\(a\\) and \\(W\\)). This assumption is referred to as positivity or overlap. Remark: Together, (2) and (3), the assumptions of no interference and consistency, respectively, are jointly referred to as the stable unit treatment value assumption (SUTVA). Given these assumptions, the ATE may be re-written as a function of \\(P_0\\), specifically \\[\\begin{equation}\\label{eqn:estimand} ATE = \\mathbb{E}_0(Y(1) - Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\right), \\end{equation}\\] or the difference in the predicted outcome values for each subject, under the contrast of treatment conditions (\\(A = 0\\) vs. \\(A = 1\\)), in the population, averaged over all observations. Thus, a parameter of a theoretical “full” data distribution can be represented as an estimand of the observed data distribution. Significantly, there is nothing about the representation in that requires parameteric assumptions; thus, the regressions on the right hand side may be estimated freely with machine learning. With different parameters, there will be potentially different identifiability assumptions and the resulting estimands can be functions of different components of \\(P_0\\). 2.6 The WASH Benefits Example Dataset The data come from a study of the effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh (WASH Benefits Bangladesh): a cluster-randomised controlled trial (Luby et al. 2018). The study enrolled pregnant women in their first or second trimester from the rural villages of Gazipur, Kishoreganj, Mymensingh, and Tangail districts of central Bangladesh, with an average of eight women per cluster. Groups of eight geographically adjacent clusters were block-randomised, using a random number generator, into six intervention groups (all of which received weekly visits from a community health promoter for the first 6 months and every 2 weeks for the next 18 months) and a double-sized control group (no intervention or health promoter visit). The six intervention groups were: chlorinated drinking water; improved sanitation; hand-washing with soap; combined water, sanitation, and hand washing; improved nutrition through counseling and provision of lipid-based nutrient supplements; and combined water, sanitation, handwashing, and nutrition. In the workshop, we concentrate on child growth (size for age) as the outcome of interest. For reference, this trial was registered with ClinicalTrials.gov as NCT01590095. library(tidyverse) # read in data dat &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;) dat # A tibble: 4,695 x 28 whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 0 Cont… N05265 9 268 male 30 Prima… 146. Food S… 3 2 -1.16 Cont… N05265 9 286 male 25 Prima… 149. Modera… 2 3 -1.05 Cont… N08002 9 264 male 25 Prima… 152. Food S… 1 4 -1.26 Cont… N08002 9 252 fema… 28 Prima… 140. Food S… 3 5 -0.59 Cont… N06531 9 336 fema… 19 Secon… 151. Food S… 2 6 -0.51 Cont… N06531 9 304 male 20 Secon… 154. Severe… 0 7 -2.46 Cont… N08002 9 336 fema… 19 Prima… 151. Food S… 2 8 -0.6 Cont… N06528 9 312 fema… 25 No ed… 142. Food S… 2 9 -0.23 Cont… N06528 9 322 male 30 Secon… 153. Food S… 1 10 -0.14 Cont… N06453 9 376 male 30 No ed… 156. Modera… 2 # … with 4,685 more rows, and 17 more variables: Ncomp &lt;dbl&gt;, watmin &lt;dbl&gt;, # elec &lt;dbl&gt;, floor &lt;dbl&gt;, walls &lt;dbl&gt;, roof &lt;dbl&gt;, asset_wardrobe &lt;dbl&gt;, # asset_table &lt;dbl&gt;, asset_chair &lt;dbl&gt;, asset_khat &lt;dbl&gt;, asset_chouki &lt;dbl&gt;, # asset_tv &lt;dbl&gt;, asset_refrig &lt;dbl&gt;, asset_bike &lt;dbl&gt;, asset_moto &lt;dbl&gt;, # asset_sewmach &lt;dbl&gt;, asset_mobile &lt;dbl&gt; For the purposes of this workshop, we we start by treating the data as independent and identically distributed (i.i.d.) random draws from a very large target population. We could, with available options, account for the clustering of the data (within sampled geographic units), but, for simplification, we avoid these details in these workshop presentations, although modifications of our methodology for biased samples, repeated measures, etc., are available. We have 28 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), is the weight-for-height Z-score (whz in dat); the treatment of interest, \\(A\\), is the randomized treatment group (tr in dat); and the adjustment set, \\(W\\), consists simply of everything else. This results in our observed data structure being \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, Y_i)\\), for \\(i = 1, \\ldots, n\\). Using the skimr package, we can quickly summarize the variables measured in the WASH Benefits data set: library(skimr) skim(dat) (#tab:skim_washb_data)Data summary Name dat Number of rows 4695 Number of columns 28 _______________________ Column type frequency: character 5 numeric 23 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace tr 0 1 3 15 0 7 0 fracode 0 1 2 6 0 20 0 sex 0 1 4 6 0 2 0 momedu 0 1 12 15 0 3 0 hfiacat 0 1 11 24 0 4 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist whz 0 1.00 -0.59 1.03 -4.67 -1.28 -0.6 0.08 4.97 ▁▆▇▁▁ month 0 1.00 6.45 3.33 1.00 4.00 6.0 9.00 12.00 ▇▇▅▇▇ aged 0 1.00 266.32 52.17 42.00 230.00 266.0 303.00 460.00 ▁▂▇▅▁ momage 18 1.00 23.91 5.24 14.00 20.00 23.0 27.00 60.00 ▇▇▁▁▁ momheight 31 0.99 150.50 5.23 120.65 147.05 150.6 154.06 168.00 ▁▁▆▇▁ Nlt18 0 1.00 1.60 1.25 0.00 1.00 1.0 2.00 10.00 ▇▂▁▁▁ Ncomp 0 1.00 11.04 6.35 2.00 6.00 10.0 14.00 52.00 ▇▃▁▁▁ watmin 0 1.00 0.95 9.48 0.00 0.00 0.0 1.00 600.00 ▇▁▁▁▁ elec 0 1.00 0.60 0.49 0.00 0.00 1.0 1.00 1.00 ▆▁▁▁▇ floor 0 1.00 0.11 0.31 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ walls 0 1.00 0.72 0.45 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ roof 0 1.00 0.99 0.12 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ asset_wardrobe 0 1.00 0.17 0.37 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▂ asset_table 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_chair 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_khat 0 1.00 0.61 0.49 0.00 0.00 1.0 1.00 1.00 ▅▁▁▁▇ asset_chouki 0 1.00 0.78 0.41 0.00 1.00 1.0 1.00 1.00 ▂▁▁▁▇ asset_tv 0 1.00 0.30 0.46 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_refrig 0 1.00 0.08 0.27 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_bike 0 1.00 0.32 0.47 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_moto 0 1.00 0.07 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_sewmach 0 1.00 0.06 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_mobile 0 1.00 0.86 0.35 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ A convenient summary of the relevant variables is given just above, complete with a small visualization describing the marginal characteristics of each covariate. Note that the asset variables reflect socio-economic status of the study participants. Notice also the uniform distribution of the treatment groups (with twice as many controls); this is, of course, by design. References "],
["sl3.html", "Chapter 3 Super (Machine) Learning 3.1 Learning Objectives 3.2 Motivation 3.3 Introduction 3.4 sl3 “Microwave Dinner” Implementation 3.5 Cross-validated Super Learner 3.6 Variable Importance Measures with sl3 3.7 Exercises 3.8 Concluding Remarks 3.9 Appendix", " Chapter 3 Super (Machine) Learning Based on the sl3 R package by Jeremy Coyle, Nima Hejazi, Ivana Malenica, and Oleg Sofrygin. Updated: 2020-02-20 3.1 Learning Objectives By the end of this chapter you will be able to: Select a loss function that is appropriate for the functional parameter to be estimated. Assemble an ensemble of learners based on the properties that identify what features they support. Customize learner hyperparameters to incorporate a diversity of different settings. Select a subset of available covariates and pass only those variables to the modeling algorithm. Fit an ensemble with nested cross-validation to obtain an estimate of the performance of the ensemble itself. Obtain sl3 variable importance metrics. Interpret the discrete and continuous Super Learner fits. Rationalize the need to remove bias from the Super Learner to make an optimal bias–variance tradeoff for the parameter of interest. 3.2 Motivation A common task in statistical data analysis is estimator selection (e.g., for prediction). There is no universally optimal machine learning algorithm for density estimation or prediction. For some data, one needs learners that can model a complex function. For others, possibly as a result of noise or insufficient sample size, a simple, parametric model might fit best. The Super Learner, an ensemble learner, solves this issue, by allowing a combination of learners from the simplest (intercept-only) to most complex (neural nets, random forests, SVM, etc). It works by using cross-validation in a manner which guarantees that the resulting fit will be as good as possible, given the learners provided. 3.3 Introduction In Chapter 1, we introduced the Roadmap for Targeted Learning as a general template to translate real-world data applications into formal statistical estimation problems. The first steps of this roadmap define the statistical estimation problem, which establish Data as a realization of a random variable, or equivalently, an outcome of a particular experiment. A statistical model, representing the true knowledge about the data-generating experiment. A translation of the scientific question, which is often causal, into a target parameter. Note that if the target parameter is causal, step 3 also requires establishing identifiability of the target quantity from the observed data distribution, under possible non-testable assumptions that may not necessarily be reasonable. Still, the target quantity does have a valid statistical interpretation. See causal target parameters for more detail on causal models and identifiability. Now that we have defined the statistical estimation problem, we are ready to construct the TMLE; an asymptotically linear and efficient substitution estimator of this target quantity. The first step in this estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the Super Learner (van der Laan, Polley, and Hubbard 2007). The Super Learner provides an important step in creating a robust estimator. It is a loss-function-based tool that uses cross-validation to obtain the best prediction of our target parameter, based on a weighted average of a library of machine learning algorithms. The library of machine learning algorithms consists of functions (“learners” in the sl3 nomenclature) that we think might be consistent with the true data-generating distribution (i.e. algorithms selected based on contextual knowledge of the experiment that generated the data). Also, the library should contain a large set of “default” algorithms that may range from a simple linear regression model to multi-step algorithms involving screening covariates, penalizations, optimizing tuning parameters, etc. The ensembling of the collection of algorithms with weights (“metalearning” in the sl3 nomenclature) has been shown to be adaptive and robust, even in small samples (Polley and van der Laan 2010). The Super Learner is proven to be asymptotically as accurate as the best possible prediction algorithm in the library (van der Laan and Dudoit 2003; van der Vaart, Dudoit, and van der Laan 2006). 3.3.1 Background Defining the loss function A loss function (\\(L\\)) is defined as a function of the observed data and a candidate parameter value \\(\\psi\\), which has unknown true value \\(\\psi_0\\), \\(L(\\psi)(O)\\). We can estimate the loss by substituting the empirical distribution \\(P_n\\) for the true (but unknown) distribution of the observed data \\(P_0\\). A valid loss function will have expectation (risk) that is minimized at the true value of the parameter \\(\\psi_0\\). For example, the conditional mean minimizes the risk of the squared error loss. Thus, it is a valid loss function when estimating the conditional mean. What is cross-validation and how does it work? There are many different cross-validation schemes, designed to accommodate different study designs and data structures. The figure below shows an example of 10-fold cross-validation. The cross-validated empirical risk of an algorithm is defined as the empirical mean over a validation sample of the loss of the algorithm fitted on the training sample, averaged across the splits of the data. Cross-validation is proven to be optimal for selection among estimators. This result was established through the oracle inequality for the cross-validation selector among a collection of candidate estimators (van der Laan and Dudoit 2003; van der Vaart, Dudoit, and van der Laan 2006). The only condition is that loss function is uniformly bounded, which is guaranteed in sl3. Discrete vs. Continuous Super Learner The discrete Super Learner, or cross-validation selector, is the algorithm in the library that minimizes the cross-validated empirical risk. The continuous/ensemble Super Learner, often referred to as Super Learner is a weighted average of the library of algorithms, where the weights are chosen to minimize the cross-validated empirical risk of the library. Restricting the weights to be positive and sum to one (i.e., a convex combination) has been shown to improve upon the discrete Super Learner (Polley and van der Laan 2010; van der Laan, Polley, and Hubbard 2007). This notion of weighted combinations was introduced in Wolpert (1992) for neural networks and adapted for regressions in 3.3.1.1 Example: Super Learner for Prediction We observe a learning data set \\(X_i=(Y_i,W_i)\\), for \\(i=1, ..., n\\). Here, \\(Y_i\\) is the outcome of interest, and \\(W_i\\) is a p-dimensional set of covariates. Our objective is to estimate the function \\(\\psi_0(W) = E(Y|W)\\). This function can be expressed as the minimizer of the expected loss: \\(\\psi_0(W) = \\text{argmin}_{\\psi} E[L(X,\\psi(W))]\\). Here, the loss function is represented as \\(L\\) (e.g., squared error loss, \\(L: (Y-\\psi(W))^2)\\)). 3.3.1.2 General Overview of the Algorithm General step-by-step overview of the Super Learner algorithm: Break up the sample evenly into \\(V\\)-folds (say \\(V\\)=10). For each of these 10 folds, remove that portion of the sample (kept out as validation sample) and the remaining will be used to fit learners (training sample). Fit each learner on the training sample (note, some learners will have their own internal cross-validation procedure or other methods to select tuning parameters). For each observation in the corresponding validation sample, predict the outcome using each of the learners, so if there are \\(p\\) learners, then there would be \\(p\\) predictions. Take out another validation sample and repeat until each of the \\(V\\)-sets of data are removed. Compare the cross-validated fit of the learners across all observations based on specified loss function (e.g., squared error, negative log-likelihood, etc.) by calculating the corresponding average loss (risk). Either: choose the learner with smallest risk and apply that learner to entire data set (resulting SL fit), do a weighted average of the learners to minimize the cross-validated risk (construct an ensemble of learners), by re-fitting the learners on the original data set, and use the weights above to get the SL fit. This entire procedure can be itself cross-validated to get a consistent estimate of the future performance of the Super Learner, and we implement this procedure later in this chapter. 3.3.2 Why use the Super Learner? For prediction, one can use the cross-validated risk to empirically determine the relative performance of SL and competing methods. When we have tested different algorithms on actual data and looked at the performance (e.g., MSE of prediction), never does one algorithm always win (see below). Below shows the results of such a study, comparing the fits of several different learners, including the SL algorithms. Super Learner performs asymptotically as well as best possible weighted combination. By including all competitors in the library of candidate estimators (glm, neural nets, SVMs, random forest, etc.), the Super Learner will asymptotically outperform any of its competitors- even if the set of competitors is allowed to grow polynomial in sample size. Motivates the name “Super Learner”: it provides a system of combining many estimators into an improved estimator. For more detail on Super Learner we refer the reader to van der Laan, Polley, and Hubbard (2007) and Polley and van der Laan (2010). The optimality results for the cross-validation selector among a family of algorithms were established in van der Laan and Dudoit (2003) and extended in van der Vaart, Dudoit, and van der Laan (2006). 3.4 sl3 “Microwave Dinner” Implementation We begin by illustrating the core functionality of the Super Learner algorithm as implemented in sl3. For those who are interested in the internals of sl3, see this sl3 introductory tutorial. The sl3 implementation consists of the following steps: Load the necessary libraries and data Define the machine learning task Make a Super Learner by creating library of base learners and a metalearner Train the Super Learner on the machine learning task Obtain predicted values WASH Benefits Study Example Using the WASH data, we are interested in predicting weight-for-height z-score whz using the available covariate data. Let’s begin! 0. Load the necessary libraries and data First, we will load the relevant R packages, set a seed, and load the data. library(here) library(data.table) library(knitr) library(kableExtra) library(tidyverse) library(origami) library(SuperLearner) library(sl3) set.seed(7194) # my lucky seed! or is it 9174? or 4917? many lucky seeds, thanks lysdexia! # load data set and take a peek washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) head(washb_data) %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp watmin elec floor walls roof asset_wardrobe asset_table asset_chair asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto asset_sewmach asset_mobile 0.00 Control N05265 9 268 male 30 Primary (1-5y) 146.40 Food Secure 3 11 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 -1.16 Control N05265 9 286 male 25 Primary (1-5y) 148.75 Moderately Food Insecure 2 4 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 -1.05 Control N08002 9 264 male 25 Primary (1-5y) 152.15 Food Secure 1 10 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 -1.26 Control N08002 9 252 female 28 Primary (1-5y) 140.25 Food Secure 3 5 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 -0.59 Control N06531 9 336 female 19 Secondary (&gt;5y) 150.95 Food Secure 2 7 0 1 0 1 1 1 1 1 1 1 0 0 0 0 0 1 -0.51 Control N06531 9 304 male 20 Secondary (&gt;5y) 154.20 Severely Food Insecure 0 3 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1. Define the machine learning task To define the machine learning “task” (predict weight-for-height z-score whz using the available covariate data), we need to create an sl3_Task object. The sl3_Task keeps track of the roles the variables play in the machine learning problem, the data, and any metadata (e.g., observational-level weights, id, offset). Also, if we had missing outcomes, we would need to set drop_missing_outcome = TRUE when we create the task. # specify the outcome and covariates outcome &lt;- &quot;whz&quot; covars &lt;- colnames(washb_data)[-which(names(washb_data) == outcome)] # create the sl3 task washb_task &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome ) Warning in process_data(data, nodes, column_names = column_names, flag = flag, : Missing covariate data detected: imputing covariates. This warning is important. The task just imputed missing covariates for us. Specifically, for each covariate column with missing values, sl3 uses the median to impute missing continuous covariates, and the mode to impute binary and categorical covariates. Also, for each covariate column with missing values, sl3 adds an additional column indicating whether or not the value was imputed, which is particularly handy when the missingness in the data might be informative. Also, notice that we did not specify the number of folds, or the loss function in the task. The default cross-validation scheme is \\(V\\)-fold, with the number of folds \\(V=10\\). Let’s visualize our washb_task. washb_task A sl3 Task with 4695 obs and these nodes: $covariates [1] &quot;tr&quot; &quot;fracode&quot; &quot;month&quot; &quot;aged&quot; [5] &quot;sex&quot; &quot;momage&quot; &quot;momedu&quot; &quot;momheight&quot; [9] &quot;hfiacat&quot; &quot;Nlt18&quot; &quot;Ncomp&quot; &quot;watmin&quot; [13] &quot;elec&quot; &quot;floor&quot; &quot;walls&quot; &quot;roof&quot; [17] &quot;asset_wardrobe&quot; &quot;asset_table&quot; &quot;asset_chair&quot; &quot;asset_khat&quot; [21] &quot;asset_chouki&quot; &quot;asset_tv&quot; &quot;asset_refrig&quot; &quot;asset_bike&quot; [25] &quot;asset_moto&quot; &quot;asset_sewmach&quot; &quot;asset_mobile&quot; &quot;delta_momage&quot; [29] &quot;delta_momheight&quot; $outcome [1] &quot;whz&quot; $id NULL $weights NULL $offset NULL 2. Make a Super Learner Now that we have defined our machine learning problem with the task, we are ready to “make” the Super Learner. This requires specification of A library of base learning algorithms that we think might be consistent with the true data-generating distribution. A metalearner, to ensemble the base learners. We might also incorporate Feature selection, to pass only a subset of the predictors to the algorithm. Hyperparameter specification, to tune base learners. Learners have properties that indicate what features they support. We may use sl3_list_properties() to get a list of all properties supported by at least one learner. sl3_list_properties() [1] &quot;binomial&quot; &quot;categorical&quot; &quot;continuous&quot; [4] &quot;cv&quot; &quot;density&quot; &quot;ids&quot; [7] &quot;multivariate_outcome&quot; &quot;offset&quot; &quot;preprocessing&quot; [10] &quot;timeseries&quot; &quot;weights&quot; &quot;wrapper&quot; Since we have a continuous outcome, we may identify the learners that support this outcome type with sl3_list_learners(). sl3_list_learners(&quot;continuous&quot;) [1] &quot;Lrnr_arima&quot; &quot;Lrnr_bartMachine&quot; [3] &quot;Lrnr_bilstm&quot; &quot;Lrnr_caret&quot; [5] &quot;Lrnr_condensier&quot; &quot;Lrnr_dbarts&quot; [7] &quot;Lrnr_earth&quot; &quot;Lrnr_expSmooth&quot; [9] &quot;Lrnr_gam&quot; &quot;Lrnr_gbm&quot; [11] &quot;Lrnr_glm&quot; &quot;Lrnr_glm_fast&quot; [13] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [15] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [17] &quot;Lrnr_hal9001&quot; &quot;Lrnr_HarmonicReg&quot; [19] &quot;Lrnr_lstm&quot; &quot;Lrnr_mean&quot; [21] &quot;Lrnr_nnls&quot; &quot;Lrnr_optim&quot; [23] &quot;Lrnr_pkg_SuperLearner&quot; &quot;Lrnr_pkg_SuperLearner_method&quot; [25] &quot;Lrnr_pkg_SuperLearner_screener&quot; &quot;Lrnr_polspline&quot; [27] &quot;Lrnr_randomForest&quot; &quot;Lrnr_ranger&quot; [29] &quot;Lrnr_rpart&quot; &quot;Lrnr_rugarch&quot; [31] &quot;Lrnr_screener_corP&quot; &quot;Lrnr_screener_corRank&quot; [33] &quot;Lrnr_screener_randomForest&quot; &quot;Lrnr_solnp&quot; [35] &quot;Lrnr_stratified&quot; &quot;Lrnr_svm&quot; [37] &quot;Lrnr_tsDyn&quot; &quot;Lrnr_xgboost&quot; Now that we have an idea of some learners, we can construct them using the make_learner function. # choose base learners lrnr_glm &lt;- make_learner(Lrnr_glm) lrnr_mean &lt;- make_learner(Lrnr_mean) We can customize learner hyperparameters to incorporate a diversity of different settings. Documentation for the learners and their hyperparameters can be found in the sl3 Learners Reference. lrnr_ranger50 &lt;- make_learner(Lrnr_ranger, num.trees = 50) lrnr_hal_simple &lt;- make_learner(Lrnr_hal9001, max_degree = 2, n_folds = 2) lrnr_lasso &lt;- make_learner(Lrnr_glmnet) # alpha default is 1 lrnr_ridge &lt;- make_learner(Lrnr_glmnet, alpha = 0) lrnr_elasticnet &lt;- make_learner(Lrnr_glmnet, alpha = .5) We can also include learners from the SuperLearner R package. lrnr_bayesglm &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.bayesglm&quot;) Here is a fun trick to create customized learners over a grid of parameters. # I like to crock pot my super learners grid_params &lt;- list(cost = c(0.01, 0.1, 1, 10, 100, 1000), gamma = c(0.001, 0.01, 0.1, 1), kernel = c(&quot;polynomial&quot;, &quot;radial&quot;, &quot;sigmoid&quot;), degree = c(1, 2, 3)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) svm_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_svm$new, c(params_default, as.list(params_tune)))}) grid_params &lt;- list(max_depth = c(2, 4, 6, 8), eta = c(0.001, 0.01, 0.1, 0.2, 0.3), nrounds = c(20, 50)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) xgb_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_xgboost$new, c(params_default, as.list(params_tune)))}) Did you see Lrnr_caret when we called sl3_list_learners(c(&quot;continuous&quot;))? All we need to specify is the algorithm to use, which is passed as method to caret::train(). The default method for parameter selection criterion with is set to “CV” instead of the caret::train() default boot. The summary metric to used to select the optimal model is RMSE for continuous outcomes and Accuracy for categorical and binomial outcomes. # I have no idea how to tune a neural net (or BART machine..) lrnr_caret_nnet &lt;- make_learner(Lrnr_caret, algorithm = &quot;nnet&quot;) lrnr_caret_bartMachine &lt;- make_learner(Lrnr_caret, algorithm = &quot;bartMachine&quot;, method = &quot;boot&quot;, metric = &quot;RMSE&quot;, tuneLength = 10) In order to assemble the library of learners, we need to “stack” them together. A Stack is a special learner and it has the same interface as all other learners. What makes a stack special is that it combines multiple learners by training them simultaneously, so that their predictions can be either combined or compared. stack &lt;- make_learner( Stack, lrnr_glm, lrnr_mean, lrnr_ridge, lrnr_lasso, xgb_learners[[10]] ) We can optionally select a subset of available covariates and pass only those variables to the modeling algorithm. Let’s consider screening covariates based on their randomForest variable importance ranking (ordered by mean decrease in accuracy). screen_rf &lt;- make_learner(Lrnr_screener_randomForest, nVar = 5, ntree = 20) # which covariates are selected on the full data? screen_rf$train(washb_task) [1] &quot;Lrnr_screener_randomForest_5_20&quot; $selected [1] &quot;month&quot; &quot;aged&quot; &quot;momage&quot; &quot;momheight&quot; &quot;Ncomp&quot; To “pipe” only the selected covariates to the modeling algorithm, we need to make a Pipeline, which is a just set of learners to be fit sequentially, where the fit from one learner is used to define the task for the next learner. screen_rf_pipeline &lt;- make_learner(Pipeline, screen_rf, stack) Now our learners will be preceded by a screening step. We also consider the original stack, to compare how the feature selection methods perform in comparison to the methods without feature selection. Analogous to what we have seen before, we have to stack the pipeline and original stack together, so we may use them as base learners in our super learner. fancy_stack &lt;- make_learner(Stack, screen_rf_pipeline, stack) # we can visualize the stack dt_stack &lt;- delayed_learner_train(fancy_stack, washb_task) plot(dt_stack, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) We will use the default metalearner, which uses Lrnr_solnp() to provide fitting procedures for a pairing of loss function and metalearner function. This default metalearner selects a loss and metalearner pairing based on the outcome type. Note that any learner can be used as a metalearner. We have made a library/stack of base learners, so we are ready to make the super learner. The Super Learner algorithm fits a metalearner on the validation-set predictions. sl &lt;- make_learner(Lrnr_sl, learners = fancy_stack ) We can also use Lrnr_cv to build a Super Learner, cross-validate a stack of learners to compare performance of the learners in the stack, or cross-validate any single learner (see “Cross-validation” section of this sl3 introductory tutorial). Furthermore, we can Define New sl3 Learners which can be used in all the places you could otherwise use any other sl3 learners, including Pipelines, Stacks, and the Super Learner. dt_sl &lt;- delayed_learner_train(sl, washb_task) plot(dt_sl, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) 3. Train the Super Learner on the machine learning task The Super Learner algorithm fits a metalearner on the validation-set predictions in a cross-validated manner, thereby avoiding overfitting. Now we are ready to “train” our Super Learner on our sl3_task object, washb_task. sl_fit &lt;- sl$train(washb_task) 4. Obtain predicted values Now that we have fit the Super Learner, we are ready to calculate the predicted outcome for each subject. # we did it! now we have super learner predictions sl_preds &lt;- sl_fit$predict() head(sl_preds) [1] -0.6607234 -0.7704188 -0.6681106 -0.6520163 -0.6387867 -0.6814883 We can also obtain a summary of the results. sl_fit$print() [1] &quot;SuperLearner:&quot; List of 2 $ : chr &quot;Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)&quot; $ : chr &quot;Stack&quot; [1] &quot;Lrnr_solnp_TRUE_TRUE_FALSE_1e-05&quot; $pars [1] 3.916265e-06 1.312767e-06 3.576467e-06 3.571405e-06 1.944023e-01 [6] 2.606307e-01 1.312767e-06 6.456129e-05 5.448859e-01 2.793099e-06 $convergence [1] 0 $values [1] 1.020027 1.009288 1.009288 $lagrange [,1] [1,] -0.0425475 $hessian [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 1.1874268 0.34499575 0.2265531 0.2050343 0.4551838 0.6194831 0.34499575 [2,] 0.3449957 0.97936796 0.3081429 0.3116779 0.2712766 0.4188264 -0.02063204 [3,] 0.2265531 0.30814289 1.1505913 0.1591955 0.3967489 0.5609077 0.30814289 [4,] 0.2050343 0.31167793 0.1591955 1.1520520 0.4114879 0.5737459 0.31167793 [5,] 0.4551838 0.27127656 0.3967489 0.4114879 0.4727620 0.6385758 0.27127656 [6,] 0.6194831 0.41882637 0.5609077 0.5737459 0.6385758 1.1320600 0.41882637 [7,] 0.3449957 -0.02063204 0.3081429 0.3116779 0.2712766 0.4188264 0.97936796 [8,] 0.6001427 0.42436198 0.5435979 0.5558575 0.4309280 0.3518922 0.42436198 [9,] 0.6184976 0.43561570 0.5609259 0.5739866 0.4922213 0.5302245 0.43561570 [10,] 0.5499798 0.41834044 0.5099159 0.5191618 0.6214242 0.7875224 0.41834044 [,8] [,9] [,10] [1,] 0.6001427 0.6184976 0.5499798 [2,] 0.4243620 0.4356157 0.4183404 [3,] 0.5435979 0.5609259 0.5099159 [4,] 0.5558575 0.5739866 0.5191618 [5,] 0.4309280 0.4922213 0.6214242 [6,] 0.3518922 0.5302245 0.7875224 [7,] 0.4243620 0.4356157 0.4183404 [8,] 1.2159734 1.0193784 0.7137335 [9,] 1.0193784 0.9195348 0.7450037 [10,] 0.7137335 0.7450037 0.9199019 $ineqx0 NULL $nfuneval [1] 289 $outer.iter [1] 2 $elapsed Time difference of 0.09238076 secs $vscale [1] 1.009288 0.000010 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 [9] 1.000000 1.000000 1.000000 1.000000 $coefficients Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 0.1944180 Stack_Lrnr_glm_TRUE 0.2606519 Stack_Lrnr_mean 0.0000000 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0000000 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.5449301 Stack_Lrnr_xgboost_20_1_4_0.1 0.0000000 $training_offset [1] FALSE $name [1] &quot;solnp&quot; [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner 1: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 4: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 5: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 6: Stack_Lrnr_glm_TRUE 7: Stack_Lrnr_mean 8: Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 9: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 10: Stack_Lrnr_xgboost_20_1_4_0.1 11: SuperLearner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk 1: 0.0000000 1.035485 0.02446142 0.06008226 0.9352596 1.119394 2: 0.0000000 1.065401 0.02503198 0.05999366 0.9689145 1.143488 3: 0.0000000 1.035417 0.02446090 0.06011217 0.9353524 1.119090 4: 0.0000000 1.035523 0.02445871 0.06021434 0.9352523 1.119315 5: 0.1944180 1.044729 0.02405570 0.06265341 0.9211017 1.117049 6: 0.2606519 1.018949 0.02372195 0.05817436 0.9095780 1.088981 7: 0.0000000 1.065401 0.02503198 0.05999366 0.9689145 1.143488 8: 0.0000000 1.014503 0.02362810 0.05639995 0.9191569 1.093245 9: 0.5449301 1.011972 0.02348998 0.05725994 0.9187793 1.095675 10: 0.0000000 1.035503 0.02371762 0.06206027 0.9341196 1.119005 11: NA 1.009301 0.02342783 0.05809859 0.9071163 1.089112 3.5 Cross-validated Super Learner We can cross-validate the Super Learner to see how well the Super Learner performs on unseen data, and obtain an estimate of the cross-validated risk of the Super Learner. This estimation procedure requires an “external” layer of cross-validation, also called nested cross-validation, which involves setting aside a separate holdout sample that we don’t use to fit the Super Learner. This external cross validation procedure may also incorporate 10 folds, which is the default in sl3. However, we will incorporate 2 outer/external folds of cross-validation for computational efficiency. We also need to specify a loss function to evaluate Super Learner. Documentation for the available loss functions can be found in the sl3 Loss Function Reference. washb_task_new &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome, folds = make_folds(washb_data, fold_fun = folds_vfold, V = 2) ) Warning in process_data(data, nodes, column_names = column_names, flag = flag, : Missing covariate data detected: imputing covariates. CVsl &lt;- CV_lrnr_sl(sl_fit, washb_task_new, loss_squared_error) CVsl %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 0.0751 1.0388 0.0245 0.0394 1.0110 1.0667 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 0.0000 1.0653 0.0250 0.0333 1.0418 1.0889 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0261 1.0387 0.0245 0.0382 1.0117 1.0657 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0741 1.0388 0.0245 0.0393 1.0110 1.0666 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 0.0004 1.0563 0.0242 0.0491 1.0216 1.0910 Stack_Lrnr_glm_TRUE 0.0000 1.0452 0.0279 0.0693 0.9962 1.0942 Stack_Lrnr_mean 0.0000 1.0653 0.0250 0.0333 1.0418 1.0889 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.2820 1.0236 0.0241 0.0458 0.9912 1.0559 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.2719 1.0244 0.0245 0.0539 0.9864 1.0625 Stack_Lrnr_xgboost_20_1_4_0.1 0.2704 1.0387 0.0235 0.0446 1.0072 1.0702 SuperLearner NA 1.0198 0.0240 0.0493 0.9849 1.0546 3.6 Variable Importance Measures with sl3 Variable importance can be interesting and informative. It can also be contradictory and confusing. Nevertheless, we like it, and so do collaborators, so we created a variable importance function in sl3! The sl3 varimp function returns a table with variables listed in decreasing order of importance (i.e. most important on the first row). The measure of importance in sl3 is based on a risk difference between the learner fit with a permuted covariate and the learner fit with the true covariate, across all covariates. In this manner, the larger the risk difference, the more important the variable is in the prediction. Let’s explore the sl3 variable importance measurements for the washb data. washb_varimp &lt;- varimp(sl_fit, loss_squared_error) washb_varimp %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) X risk_diff aged 0.0396 momedu 0.0093 asset_refrig 0.0037 asset_chair 0.0032 month 0.0029 tr 0.0028 momheight 0.0028 elec 0.0018 floor 0.0013 Nlt18 0.0009 asset_mobile 0.0008 asset_table 0.0007 asset_wardrobe 0.0007 momage 0.0005 walls 0.0004 asset_moto 0.0003 asset_khat 0.0003 hfiacat 0.0003 Ncomp 0.0002 asset_chouki 0.0002 delta_momheight 0.0000 asset_sewmach 0.0000 asset_bike 0.0000 roof 0.0000 asset_tv -0.0001 sex -0.0001 delta_momage -0.0002 watmin -0.0004 fracode -0.0005 3.7 Exercises 3.7.1 Predicting Myocardial Infarction with sl3 Follow the steps below to predict myocardial infarction (mi) using the available covariate data. We thank Prof. David Benkeser at Emory University for making the this Cardiovascular Health Study (CHS) data accessible. # load the data set db_data &lt;- url(&quot;https://raw.githubusercontent.com/benkeser/sllecture/master/chspred.csv&quot;) chspred &lt;- read_csv(file = db_data, col_names = TRUE) # take a quick peek head(chspred) %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) waist alcoh hdl beta smoke ace ldl bmi aspirin gend age estrgn glu ins cysgfr dm fetuina whr hsed race logcystat logtrig logcrp logcre health logkcal sysbp mi 110.1642 0.0000 66.4974 0 0 1 114.2162 27.9975 0 0 73.5179 0 159.9314 70.3343 75.0078 1 0.1752 1.1690 1 1 -0.3420 5.4063 2.0126 -0.6739 0 4.3926 177.1345 0 89.9763 0.0000 50.0652 0 0 0 103.7766 20.8931 0 0 61.7723 0 153.3888 33.9695 82.7433 1 0.5717 0.9011 0 0 -0.0847 4.8592 3.2933 -0.5551 1 6.2071 136.3742 0 106.1941 8.4174 40.5059 0 0 0 165.7158 28.4554 1 1 72.9312 0 121.7145 -17.3017 74.6989 0 0.3517 1.1797 0 1 -0.4451 4.5088 0.3013 -0.0115 0 6.7320 135.1993 0 90.0566 0.0000 36.1750 0 0 0 45.2035 23.9608 0 0 79.1191 0 53.9691 11.7315 95.7823 0 0.5439 1.1360 0 0 -0.4807 5.1832 3.0243 -0.5751 1 7.3972 139.0182 0 78.6143 2.9790 71.0642 0 1 0 131.3121 10.9656 0 1 69.0179 0 94.3153 9.7112 72.7109 0 0.4916 1.1028 1 0 0.3121 4.2190 -0.7057 0.0053 1 8.2779 88.0470 0 91.6593 0.0000 59.4963 0 0 0 171.1872 29.1317 0 1 81.8346 0 212.9066 -28.2269 69.2184 1 0.4621 0.9529 1 0 -0.2872 5.1773 0.9705 0.2127 1 5.9942 69.5943 0 Create an sl3 task, setting myocardial infarction mi as the outcome and using all available covariate data. Make a library of seven relatively fast base learning algorithms (i.e., do not consider BART or HAL). Customize hyperparameters for one of your learners. Feel free to use learners from sl3 or SuperLearner. You may use the same base learning library that is presented above. Incorporate feature selection with the SuperLearner screener screen.corP. Fit the metalearning step with the default metalearner. With the metalearner and base learners, make the Super Learner and train it on the task. Print your Super Learner fit by calling print() with $. Cross-validate your Super Learner fit to see how well it performs on unseen data. Specify loss_squared_error as the loss function to evaluate the Super Learner. 3.7.2 Predicting Recurrent Ischemic Stroke in an RCT with sl3 For this exercise, we will work with a random sample of 5,000 patients who participated in the International Stroke Trial (IST). This data is described in Chapter 3.2 of the tlverse handbook. Train a Super Learner to predict recurrent stroke DRSISC with the available covariate data (the 25 other variables). Of course, you can consider feature selection in the machine learning algorithms. In this data, the outcome is occasionally missing, so be sure to specify drop_missing_outcome = TRUE when defining the task. Use the SL-based predictions to calculate the area under the ROC curve (AUC). Calculate the cross-validated AUC with cross-validated SL-based predictions. If you would like to decrease the number of outer cross-validation folds, then specify the task as described below for 5 outer folds. ist_data &lt;- data.table(read.csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-handbook/master/data/ist_sample.csv&quot;)) # number 3 help ist_task_CVsl &lt;- make_sl3_Task( data = ist_data, outcome = &quot;DRSISC&quot;, covariates = colnames(ist_data)[-which(names(ist_data) == &quot;DRSISC&quot;)], drop_missing_outcome = TRUE, folds = make_folds( n = sum(!is.na(ist_data$DRSISC)), fold_fun = folds_vfold, V = 5 ) ) 3.8 Concluding Remarks The general ensemble learning approach of Super Learner can be applied to a diversity of estimation and prediction problems that can be defined by a loss function. We just discussed conditional mean estimation, outcome prediction and variable importance. In future updates of the handbook, we will delve into prediction of a conditional density, and the optimal individualized treatment rule. If we plug in the estimator returned by Super Learner into the target parameter mapping, then we would end up with an estimator that has the same bias as what we plugged in, and would not be asymptotically linear. It also would not be a plug-in estimator or efficient. An asymptotically linear estimator is important to have, since they converge to the estimand at \\(\\frac{1}{\\sqrt{n}}\\) rate, and thereby permit formal statistical inference (i.e. confidence intervals and \\(p\\)-values). Plug-in estimators of the estimand are desirable because they respect both the local and global constraints of the statistical model (e.g., bounds), and have they have better finite-sample properties. An efficient estimator is optimal in the sense that it has the lowest possible variance, and is thus the most precise. An estimator is efficient if and only if is asymptotically linear with influence curve equal to the canonical gradient. The canonical gradient is a mathematical object that is specific to the target estimand, and it provides information on the level of difficulty of the estimation problem. The canonical gradient is shown in the chapters that follow. Practitioner’s do not need to know how to calculate a canonical gradient in order to understand efficiency and use Targeted Maximum Likelihood Estimation (TMLE). Metaphorically, you do not need to be Yoda in order to be a Jedi. TMLE is a general strategy that succeeds in constructing efficient and asymptotically linear plug-in estimators. Super Learner is fantastic for pure prediction, and for obtaining an initial estimate in the first step of TMLE, but we need the second step of TMLE to have the desirable statistical properties mentioned above. In the chapters that follow, we focus on the targeted maximum likelihood estimator and the targeted minimum loss-based estimator, both referred to as TMLE. 3.9 Appendix 3.9.1 Exercise 1 Solution Here is a potential solution to the sl3 Exercise – Predicting Myocardial Infarction with sl3. # make task chspred_task &lt;- make_sl3_Task( data = chspred, covariates = head(colnames(chspred), -1), outcome = &quot;mi&quot; ) # make learners glm_learner &lt;- Lrnr_glm$new() lasso_learner &lt;- Lrnr_glmnet$new(alpha = 1) ridge_learner &lt;- Lrnr_glmnet$new(alpha = 0) enet_learner &lt;- Lrnr_glmnet$new(alpha = 0.5) curated_glm_learner &lt;- Lrnr_glm_fast$new(formula = &quot;mi ~ smoke + beta + waist&quot;) mean_learner &lt;- Lrnr_mean$new() # That is one mean learner! glm_fast_learner &lt;- Lrnr_glm_fast$new() ranger_learner &lt;- Lrnr_ranger$new() svm_learner &lt;- Lrnr_svm$new() xgb_learner &lt;- Lrnr_xgboost$new() screen_cor &lt;- make_learner(Lrnr_screener_corP) glm_pipeline &lt;- make_learner(Pipeline, screen_cor, glm_learner) # stack learners together stack &lt;- make_learner( Stack, glm_pipeline, glm_learner, lasso_learner, ridge_learner, enet_learner, curated_glm_learner, mean_learner, glm_fast_learner, ranger_learner, svm_learner, xgb_learner ) # choose metalearner metalearner &lt;- make_learner(Lrnr_nnls) sl &lt;- Lrnr_sl$new( learners = stack, metalearner = metalearner ) sl_fit &lt;- sl$train(chspred_task) sl_fit$print() CVsl &lt;- CV_lrnr_sl(sl_fit, chspred_task, loss_squared_error) CVsl References "],
["the-tmle-framework.html", "Chapter 4 The TMLE Framework 4.1 Introduction 4.2 Learning Objectives 4.3 Easy-Bake Example: tmle3 for ATE 4.4 tmle3 Components 4.5 Fitting tmle3 with multiple parameters 4.6 Stratified Effect Estimates 4.7 Exercises 4.8 Summary", " Chapter 4 The TMLE Framework Based on the tmle3 R package. Updated: 2020-02-20 4.1 Introduction The first step in the estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the super learner (van der Laan, Polley, and Hubbard 2007), as described in the previous section. With the initial estimate of relevant parts of the data-generating distribution necessary to evaluate the target parameter, we are ready to construct the TMLE! 4.1.1 Substitution Estimators Beyond a fit of the prediction function, one might also want to estimate more targeted parameters specific to certain scientific questions. The approach is to plug into the estimand of interest estimates of the relevant distributions. Sometimes, we can use simple empirical distributions, but averaging some function over the observations (e.g., giving weight \\(1/n\\) for all observations). Other parts of the distribution, like conditional means or probabilities, the estimate will require some sort of smoothing due to the curse of dimensionality. We give one example using an example of the average treatment effect (see above): \\(\\Psi(P_0) = \\Psi(Q_0) = \\mathbb{E}_0 \\big[\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\big]\\), where \\(Q_0\\) represents both the distribution of \\(Y \\mid A,W\\) and distribution of \\(W\\). Let \\(\\bar{Q}_0(A,W) \\equiv \\mathbb{E}_0(Y \\mid A,W)\\) and \\(Q_{0,W}(w) = P_0 (W=w)\\), then \\[ \\Psi(Q_0) = \\sum_w \\{ \\bar{Q}_0(1,w)-\\bar{Q}_0(0,w)\\} Q_{0,W}(w) \\] The Substitution Estimator plugs in the empirical distribution (weight \\(1/n\\) for each observation) for \\(Q_{0,W}(W_i)\\), and some estimate of the regression of \\(Y\\) on \\((A,W)\\) (say SL fit): \\[ \\Psi(Q_n) = \\frac{1}{n} \\sum_{i=1}^n \\{ \\bar{Q}_n(1,W_i)-\\bar{Q}_n(0,W_i)\\} \\] Thus, it becomes the average of the differences in predictions from the fit keeping the observed \\(W\\), but first replacing \\(A=1\\) and then the same but all \\(A=0\\). 4.1.2 TMLE Though using SL over an arbitrary parametric regression is an improvement, it’s not sufficient to have the properties of an estimator one needs for rigorous inference. Because the variance-bias trade-off in the SL is focused on the prediction model, it can, for instance, under-fit portions of the distributions that are critical for estimating the parameter of interest, \\(\\Psi(P_0)\\). TMLE keeps the benefits of substitution estimators (it is one), but augments the original estimates to correct for this issue and also results in an asymptotically linear (and thus normally-distributed) estimator with consistent Wald-style confidence intervals. Produces a well-defined, unbiased, efficient substitution estimator of target parameters of a data-generating distribution. Updates an initial (super learner) estimate of the relevant part of the data-generating distribution possibly using an estimate of a nuisance parameter (like the model of intervention given covariates). Removes asymptotic residual bias of initial estimator for the target parameter, if it uses a consistent estimator of \\(g_0\\). If initial estimator was consistent for the target parameter, the additional fitting of the data in the targeting step may remove finite sample bias, and preserves consistency property of the initial estimator. If the initial estimator and the estimator of \\(g_0\\) are both consistent, then it is also asymptotically efficient according to semi-parametric statistical model efficiency theory. Thus, every effort is made to achieve minimal bias and the asymptotic semi-parametric efficiency bound for the variance. There are different types of TMLE, sometimes for the same set of parameters, but below is an example of the algorithm for estimating the ATE. In this case, one can present the estimator as: \\[ \\Psi(Q^{\\star}_n) = \\frac{1}{n} \\sum_{i=1}^n \\{ \\bar{Q}^{\\star}_n(1,W_i) - \\bar{Q}^{\\star}_n(0,W_i)\\} \\] where \\(\\bar{Q}^{\\star}_n(A,W)\\) is the TMLE augmented estimate. \\(f(\\bar{Q}^{\\star}_n(A,W)) = f(\\bar{Q}_n(A,W)) + \\epsilon_n \\cdot h_n(A,W)\\), where \\(f(\\cdot)\\) is the appropriate link function (e.g., logit), \\(\\epsilon_n\\) is an estimated coefficient and \\(h_n(A,W)\\) is a “clever covariate”. In this case, \\(h_n(A,W) = \\frac{A}{g_n(W)}-\\frac{1-A}{1-g_n(W)}\\), with \\(g_n(W) = \\mathbb{P}(A=1 \\mid W)\\) being the estimated (also by SL) propensity score, so the estimator depends both on initial SL fit of the outcome regression (\\(\\bar{Q}_0\\)) and an SL fit of the propensity score (\\(g_n\\)). There are further robust augmentations that are used in tlverse, such as an added layer of cross-validation to avoid over-fitting bias (CV-TMLE), and so called methods that can more robustly estimated several parameters simultaneously (e.g., the points on a survival curve). 4.1.3 Inference The estimators we discuss are asymptotically linear, meaning that the difference in the estimate \\(\\Psi(P_n)\\) and the true parameter (\\(\\Psi(P_0)\\)) can be represented in first order by a i.i.d. sum: \\[\\begin{equation}\\label{eqn:IC} \\Psi(P_n) - \\Psi(P_0) = \\frac{1}{n} \\sum_{i=1}^n IC(O_i; \\nu) + o_p(1/\\sqrt{n}) \\end{equation}\\] where \\(IC(O_i; \\nu)\\) (the influence curve or function) is a function of the data and possibly other nuisance parameters \\(\\nu\\). Importantly, such estimators have mean-zero Gaussian limiting distributions; thus, in the univariate case, one has that \\[\\begin{equation}\\label{eqn:limit_dist} \\sqrt{n}(\\Psi(P_n) - \\Psi(P_0)) \\xrightarrow[]{D}N(0,\\mathbb{V}IC(O_i;\\nu)), \\end{equation}\\] so that inference for the estimator of interest may be obtained in terms of the influence function. For this simple case, a 95% confidence interval may be derived as: \\[\\begin{equation}\\label{eqn:CI} \\Psi(P^{\\star}_n) \\pm z_{1 - \\frac{\\alpha}{2}} \\sqrt{\\frac{\\hat{\\sigma}^2}{n}}, \\end{equation}\\] where \\(SE=\\sqrt{\\frac{\\hat{\\sigma}^2}{n}}\\) and \\(\\hat{\\sigma}^2\\) is the sample variance of the estimated IC’s: \\(IC(O; \\hat{\\nu})\\). One can use the functional delta method to derive the influence curve if a parameter of interest may be written as a function of other asymptotically linear estimators. Thus, we can derive robust inference for parameters that are estimated by fitting complex, machine learning algorithms and these methods are computationally quick (do not rely on re-sampling based methods like the bootstrap). 4.2 Learning Objectives Use tmle3 to estimate an Average Treatment Effect (ATE) Understand tmle3 “Specs” Fit tmle3 for a custom set of parameters Use the delta method to estimate transformations of parameters 4.3 Easy-Bake Example: tmle3 for ATE We’ll illustrate the most basic use of TMLE using the WASH benefits example data introduced earlier and estimating an Average Treatment Effect (ATE). As a reminder, the ATE is identified with the following statistical parameter (under assumptions): \\(ATE = \\mathbb{E}_0(Y(1)-Y(0)) = \\mathbb{E}_0\\left(\\mathbb{E}_0[Y \\mid A=1,W]-\\mathbb{E}_0[Y \\mid A=0,W] \\right)\\) This Easy-Bake implementation consists of the following steps: Load the necessary libraries and data Define the variable roles Create a “Spec” object Define the super learners Fit the TMLE Evaluate the TMLE estimates 0. Load the Data We’ll use the same WASH Benefits data as the earlier chapters: library(data.table) library(tmle3) library(sl3) washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) 1. Define the variable roles We’ll use the common \\(W\\) (covariates), \\(A\\) (treatment/intervention), \\(Y\\) (outcome) data structure. tmle3 needs to know what variables in the dataset correspond to each of these roles. We use a list of character vectors to tell it. We call this a “Node List” as it corresponds to the nodes in a Directed Acyclic Graph (DAG), a way of displaying causal relationships between variables. node_list &lt;- list( W = c( &quot;month&quot;, &quot;aged&quot;, &quot;sex&quot;, &quot;momage&quot;, &quot;momedu&quot;, &quot;momheight&quot;, &quot;hfiacat&quot;, &quot;Nlt18&quot;, &quot;Ncomp&quot;, &quot;watmin&quot;, &quot;elec&quot;, &quot;floor&quot;, &quot;walls&quot;, &quot;roof&quot;, &quot;asset_wardrobe&quot;, &quot;asset_table&quot;, &quot;asset_chair&quot;, &quot;asset_khat&quot;, &quot;asset_chouki&quot;, &quot;asset_tv&quot;, &quot;asset_refrig&quot;, &quot;asset_bike&quot;, &quot;asset_moto&quot;, &quot;asset_sewmach&quot;, &quot;asset_mobile&quot; ), A = &quot;tr&quot;, Y = &quot;whz&quot; ) Handling Missingness Currently, missingness in tlverse is handled in a fairly simple way: Missing covariates are median (for continuous) or mode (for discrete) imputed, and additional covariates indicating imputation are generated Observations missing treatment variables are excluded. We implement an IPCW-TMLE to more efficiently handle missingness in the outcome variables. These steps are implemented in the process_missing function in tmle3: processed &lt;- process_missing(washb_data, node_list) washb_data &lt;- processed$data node_list &lt;- processed$node_list 2. Create a “Spec” Object tmle3 is general, and allows most components of the TMLE procedure to be specified in a modular way. However, most end-users will not be interested in manually specifying all of these components. Therefore, tmle3 implements a tmle3_Spec object that bundles a set of components into a specification that, with minimal additional detail, can be run by an end-user. We’ll start with using one of the specs, and then work our way down into the internals of tmle3. ate_spec &lt;- tmle_ATE( treatment_level = &quot;Nutrition + WSH&quot;, control_level = &quot;Control&quot; ) 3. Define the Relevant Super Learners Currently, the only other thing a user must define are the sl3 learners used to estimate the relevant factors of the likelihood: Q and g. This takes the form of a list of sl3 learners, one for each likelihood factor to be estimated with sl3: # choose base learners lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_xgboost &lt;- make_learner(Lrnr_xgboost) # define metalearners appropriate to data types ls_metalearner &lt;- make_learner(Lrnr_nnls) mn_metalearner &lt;- make_learner( Lrnr_solnp, metalearner_linear_multinomial, loss_loglik_multinomial ) sl_Y &lt;- Lrnr_sl$new( learners = list(lrnr_mean, lrnr_xgboost), metalearner = ls_metalearner ) sl_A &lt;- Lrnr_sl$new( learners = list(lrnr_mean, lrnr_xgboost), metalearner = mn_metalearner ) learner_list &lt;- list(A = sl_A, Y = sl_Y) Here, we use a Super Learner as defined in the previous sl3 section. In the future, we plan to include reasonable default learners. 4. Fit the TMLE We now have everything we need to fit the tmle using tmle3: tmle_fit &lt;- tmle3(ate_spec, washb_data, node_list, learner_list) 5. Evaluate the Estimates We can see the summary results by printing the fit object. Alternatively, we can extra results from the summary by indexing into it: print(tmle_fit) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.002348734 0.009226811 se lower upper psi_transformed lower_transformed 1: 0.05091315 -0.09056112 0.1090147 0.009226811 -0.09056112 upper_transformed 1: 0.1090147 estimates &lt;- tmle_fit$summary$psi_transformed print(estimates) [1] 0.009226811 4.4 tmle3 Components Now that we’ve successfully used a spec to obtain a TML estimate, let’s look under the hood at the components. The spec has a number of functions that generate the objects necessary to define and fit a TMLE. 4.4.1 tmle3_task First is, a tmle3_Task, analogous to an sl3_Task, containing the data we’re fitting the TMLE to, as well as an NPSEM generated from the node_list defined above, describing the variables and their relationships. tmle_task &lt;- ate_spec$make_tmle_task(washb_data, node_list) tmle_task$npsem $W tmle3_Node: W Variables: month, aged, sex, momedu, hfiacat, Nlt18, Ncomp, watmin, elec, floor, walls, roof, asset_wardrobe, asset_table, asset_chair, asset_khat, asset_chouki, asset_tv, asset_refrig, asset_bike, asset_moto, asset_sewmach, asset_mobile, momage, momheight, delta_momage, delta_momheight Parents: $A tmle3_Node: A Variables: tr Parents: W $Y tmle3_Node: Y Variables: whz Parents: A, W 4.4.2 Initial Likelihood Next, is an object representing the likelihood, factorized according to the NPSEM described above: initial_likelihood &lt;- ate_spec$make_initial_likelihood( tmle_task, learner_list ) print(initial_likelihood) W: Lf_emp A: LF_fit Y: LF_fit These components of the likelihood indicate how the factors were estimated: the marginal distribution of \\(W\\) was estimated using NP-MLE, and the conditional distributions of \\(A\\) and \\(Y\\) were estimated using sl3 fits (as defined with the learner_list) above. We can use this in tandem with the tmle_task object to obtain likelihood estimates for each observation: initial_likelihood$get_likelihoods(tmle_task) W A Y 1: 0.0002129925 0.2479697 -0.6589335 2: 0.0002129925 0.2544881 -0.6319532 3: 0.0002129925 0.2587410 -0.6197602 4: 0.0002129925 0.2787791 -0.5995325 5: 0.0002129925 0.2534947 -0.5430625 --- 4691: 0.0002129925 0.1345390 -0.4633013 4692: 0.0002129925 0.1262369 -0.4820870 4693: 0.0002129925 0.1264689 -0.5664650 4694: 0.0002129925 0.1728820 -0.8148417 4695: 0.0002129925 0.1298005 -0.5401570 4.4.3 Targeted Likelihood (updater) We also need to define a “Targeted Likelihood” object. This is a special type of likelihood that is able to be updated using an tmle3_Update object. This object defines the update strategy (e.g. submodel, loss function, CV-TMLE or not, etc). targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) When constructing the targeted likelihood, you can specify different update options. See the documentation for tmle3_Update for details of the different options. For example, you can disable CV-TMLE (the default in tmle3) as follows: targeted_likelihood_no_cv &lt;- Targeted_Likelihood$new(initial_likelihood, updater = list(cvtmle = FALSE) ) 4.4.4 Parameter Mapping Finally, we need to define the parameters of interest. Here, the spec defines a single parameter, the ATE. In the next section, we’ll see how to add additional parameters. tmle_params &lt;- ate_spec$make_params(tmle_task, targeted_likelihood) print(tmle_params) [[1]] Param_ATE: ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 4.4.5 Putting it all together Having used the spec to manually generate all these components, we can now manually fit a tmle3: tmle_fit_manual &lt;- fit_tmle3( tmle_task, targeted_likelihood, tmle_params, targeted_likelihood$updater ) print(tmle_fit_manual) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.002413659 -0.005585921 se lower upper psi_transformed lower_transformed 1: 0.05041836 -0.1044041 0.09323224 -0.005585921 -0.1044041 upper_transformed 1: 0.09323224 The result is equivalent to fitting using the tmle3 function as above. 4.5 Fitting tmle3 with multiple parameters Above, we fit a tmle3 with just one parameter. tmle3 also supports fitting multiple parameters simultaneously. To illustrate this, we’ll use the tmle_TSM_all spec: tsm_spec &lt;- tmle_TSM_all() targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) all_tsm_params &lt;- tsm_spec$make_params(tmle_task, targeted_likelihood) print(all_tsm_params) [[1]] Param_TSM: E[Y_{A=Control}] [[2]] Param_TSM: E[Y_{A=Handwashing}] [[3]] Param_TSM: E[Y_{A=Nutrition}] [[4]] Param_TSM: E[Y_{A=Nutrition + WSH}] [[5]] Param_TSM: E[Y_{A=Sanitation}] [[6]] Param_TSM: E[Y_{A=WSH}] [[7]] Param_TSM: E[Y_{A=Water}] This spec generates a Treatment Specific Mean (TSM) for each level of the exposure variable. Note that we must first generate a new targeted likelihood, as the old one was targeted to the ATE. However, we can recycle the initial likelihood we fit above, saving us a super learner step. 4.5.1 Delta Method We can also define parameters based on Delta Method Transformations of other parameters. For instance, we can estimate a ATE using the delta method and two of the above TSM parameters: ate_param &lt;- define_param( Param_delta, targeted_likelihood, delta_param_ATE, list(all_tsm_params[[1]], all_tsm_params[[4]]) ) print(ate_param) Param_delta: E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] This can similarly be used to estimate other derived parameters like Relative Risks, and Population Attributable Risks 4.5.2 Fit We can now fit a TMLE simultaneously for all TSM parameters, as well as the above defined ATE parameter all_params &lt;- c(all_tsm_params, ate_param) tmle_fit_multiparam &lt;- fit_tmle3( tmle_task, targeted_likelihood, all_params, targeted_likelihood$updater ) print(tmle_fit_multiparam) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: TSM E[Y_{A=Control}] -0.593561111 -0.618500343 2: TSM E[Y_{A=Handwashing}] -0.605973134 -0.646798568 3: TSM E[Y_{A=Nutrition}] -0.601540124 -0.614983616 4: TSM E[Y_{A=Nutrition + WSH}] -0.591147452 -0.623912358 5: TSM E[Y_{A=Sanitation}] -0.587016695 -0.592466715 6: TSM E[Y_{A=WSH}] -0.528834526 -0.447050768 7: TSM E[Y_{A=Water}] -0.575465845 -0.533206418 8: ATE E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] 0.002413659 -0.005412015 se lower upper psi_transformed lower_transformed 1: 0.02982227 -0.6769509 -0.56004976 -0.618500343 -0.6769509 2: 0.04195090 -0.7290208 -0.56457632 -0.646798568 -0.7290208 3: 0.04224538 -0.6977830 -0.53218420 -0.614983616 -0.6977830 4: 0.04078875 -0.7038568 -0.54396788 -0.623912358 -0.7038568 5: 0.04250101 -0.6757672 -0.50916627 -0.592466715 -0.6757672 6: 0.04506157 -0.5353698 -0.35873172 -0.447050768 -0.5353698 7: 0.03919802 -0.6100331 -0.45637971 -0.533206418 -0.6100331 8: 0.05040638 -0.1042067 0.09338267 -0.005412015 -0.1042067 upper_transformed 1: -0.56004976 2: -0.56457632 3: -0.53218420 4: -0.54396788 5: -0.50916627 6: -0.35873172 7: -0.45637971 8: 0.09338267 4.6 Stratified Effect Estimates TMLE can also be applied to estimate effects in in strata of a baseline covariate. The tmle_stratified spec makes it easy to extend an existing spec with stratification. For instance, we can estimate strata specific ATEs as follows: \\(ATE = \\mathbb{E}_0(Y(1)-Y(0) \\mid V=v ) = \\mathbb{E}_0\\left(\\mathbb{E}_0[Y \\mid A=1,W]-\\mathbb{E}_0[Y \\mid A=0,W] \\mid V=v \\right)\\) For example, we can stratify the above ATE spec to estimate the ATE in strata of sex: stratified_ate_spec &lt;- tmle_stratified(ate_spec, &quot;sex&quot;) stratified_fit &lt;- tmle3(stratified_ate_spec, washb_data, node_list, learner_list) print(stratified_fit) A tmle3_Fit that took 1 step(s) type param 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 2: stratified ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] | V=male 3: stratified ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] | V=female init_est tmle_est se lower upper psi_transformed 1: 0.002522441 0.0005811525 0.05051799 -0.09843229 0.09959460 0.0005811525 2: 0.002195061 0.0343638334 0.07553508 -0.11368221 0.18240988 0.0343638334 3: 0.002848567 -0.0330722581 0.06712907 -0.16464282 0.09849831 -0.0330722581 lower_transformed upper_transformed 1: -0.09843229 0.09959460 2: -0.11368221 0.18240988 3: -0.16464282 0.09849831 This TMLE is consistent for both the marginal ATE as well as the ATEs in strata of V. For continuous V, this could be extended using a working Marginal Structural Model (MSM), although that has not yet been implemented in tmle3. 4.7 Exercises 4.7.1 Estimation of the ATE with tmle3 Follow the steps below to estimate an average treatment effect using data from the Collaborative Perinatal Project (CPP), available in the sl3 package. To simplify this example, we define a binary intervention variable, parity01 – an indicator of having one or more children before the current child and a binary outcome, haz01 – an indicator of having an above average height for age. # load the data set data(cpp) cpp &lt;- cpp[!is.na(cpp[, &quot;haz&quot;]), ] cpp$parity01 &lt;- as.numeric(cpp$parity &gt; 0) cpp[is.na(cpp)] &lt;- 0 cpp$haz01 &lt;- as.numeric(cpp$haz &gt; 0) Define the variable roles \\((W,A,Y)\\) by creating a list of these nodes. Include the following baseline covariates in \\(W\\): apgar1, apgar5, gagebrth, mage, meducyrs, sexn. Both \\(A\\) and \\(Y\\) are specified above. Define a tmle3_Spec object for the ATE, tmle_ATE(). Using the same base learning libraries defined above, specify sl3 base learners for estimation of \\(Q = E(Y|A,Y)\\) and \\(g=P(A|W)\\). Define the metalearner like below. metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_binomial, learner_function = metalearner_logistic_binomial ) Define one super learner for estimating \\(Q\\) and another for estimating \\(g\\). Use the metalearner above for both \\(Q\\) and \\(g\\) super learners. Create a list of the two super learners defined in Step 5 and call this object learner_list. The list names should be A (defining the super learner for estimating \\(g\\)) and Y (defining the super learner for estimating \\(Q\\)). Fit the tmle with the tmle3 function by specifying (1) the tmle3_Spec, which we defined in Step 2; (2) the data; (3) the list of nodes, which we specified in Step 1; and (4) the list of super learners for estimating \\(g\\) and \\(Q\\), which we defined in Step 6. Note: Like before, you will need to make a data copy to deal with data.table weirdness (cpp2 &lt;- data.table::copy(cpp)) and use cpp2 as the data. 4.7.2 Estimation of Strata-Specific ATEs with tmle3 For this exercise, we will work with a random sample of 5,000 patients who participated in the International Stroke Trial (IST). This data is described in the Chapter 3.2 of the tlverse handbook. We included the data below and a summarized description that is relevant for this exercise. The outcome, \\(Y\\), indicates recurrent ischemic stroke within 14 days after randomization (DRSISC); the treatment of interest, \\(A\\), is the randomized aspirin vs. no aspirin treatment allocation (RXASP in ist); and the adjustment set, \\(W\\), consists simply of other variables measured at baseline. In this data, the outcome is occasionally missing, but there is no need to create a variable indicating this missingness (such as \\(\\Delta\\)) for analyses in the tlverse, since the missingness is automatically detected when NA are present in the outcome. Covariates with missing values (RATRIAL, RASP3 and RHEP24) have already been imputed. Additional covariates were created (MISSING_RATRIAL_RASP3 and MISSING_RHEP24), which indicate whether or not the covariate was imputed. The missingness was identical for RATRIAL and RASP3, which is why only one covariate indicating imputation for these two covariates was created. Estimate the average effect of randomized asprin treatment (RXASP = 1) on recurrent ischemic stroke. Even though the missingness mechanism on \\(Y\\), \\(\\Delta\\), does not need to be specified in the node list, it does still need to be accounted for in the TMLE. In other words, for this estimation problem, \\(\\Delta\\) is a relevant factor of the likelihood in addition to \\(Q\\), \\(g\\). Thus, when defining the list of sl3 learners for each likelihood factor, be sure to include a list of learners for estimation of \\(\\Delta\\), say sl_Delta, and specify something like learner_list &lt;- list(A = sl_A, delta_Y = sl_Delta, Y = sl_Y). Recall that this RCT was conducted internationally. Suposse there is concern that the dose of asprin may have varied across geographical regions, and an average across all geographical regions may not be warranted. Calculate the strata specific ATEs according to geographical region (REGION). ist_data &lt;- data.table(read.csv(&quot;https://raw.githubusercontent.com/tlverse/deming2019-workshop/master/data/ist_sample.csv&quot;)) 4.8 Summary tmle3 is a general purpose framework for generating TML estimates. The easiest way to use it is to use a predefined spec, allowing you to just fill in the blanks for the data, variable roles, and sl3 learners. However, digging under the hood allows users to specify a wide range of TMLEs. In the next sections, we’ll see how this framework can be used to estimate advanced parameters such as optimal treatments and shift interventions. References "],
["optimal-individualized-treatment-regimes.html", "Chapter 5 Optimal Individualized Treatment Regimes 5.1 Learning Objectives 5.2 Introduction to Optimal Individualized Interventions 5.3 Data Structure and Notation 5.4 Defining the Causal Effect of an Optimal Individualized Intervention 5.5 Binary Treatment 5.6 Categorical Treatment 5.7 Extensions to Causal Effect of an OIT 5.8 Exercise 5.9 Summary", " Chapter 5 Optimal Individualized Treatment Regimes Ivana Malenica Based on the tmle3mopttx R package by Ivana Malenica, Jeremy Coyle, and Mark van der Laan. Updated: 2020-02-20 5.1 Learning Objectives By the end of this lesson you will be able to: Differentiate dynamic and optimal dynamic treatment interventions from static interventions. Explain the benefits and challenges associated with using optimal individualized treatment regimes in practice. Contrast the impact of implementing an optimal individualized treatment regime in the population with the impact of implementing static and dynamic treatment regimes in the population. Estimate causal effects under optimal individualized treatment regimes with the tmle3mopttx R package. Implement optimal individualized treatment rules based on sub-optimal rules, or “simple” rules, and recognize the practical benefit of these rules. Construct “realistic” optimal individualized treatment regimes that respect real data and subject-matter knowledge limitations on interventions by only considering interventions that are supported by the data. Measure variable importance as defined in terms of the optimal individualized treatment interventions. 5.2 Introduction to Optimal Individualized Interventions Identifying which intervention will be effective for which patient based on lifestyle, genetic and environmental factors is a common goal in precision medicine. One opts to administer the intervention to individuals who will benefit from it, instead of assigning treatment on a population level. This aim motivates a different type of an intervention, as opposed to the static exposures we might be used to. In this chapter, we learn about dynamic (individualized) interventions that tailor the treatment decision based on the collected covariates. In the statistics community, such a treatment strategy is termed individualized treatment regimes (ITR), and the (counterfactual) population mean outcome under an ITR is the value of the ITR. Even more, suppose one wishes to maximize the population mean of an outcome, where for each individual we have access to some set of measured covariates. An ITR with the maximal value is referred to as an optimal ITR or the optimal individualized treatment. Consequently, the value of an optimal ITR is termed the optimal value, or the mean under the optimal individualized treatment. One opts to administer the intervention to individuals who will profit from it, instead of assigning treatment on a population level. But how do we know which intervention works for which patient? For example, one might seek to improve retention in HIV care. In a randomized clinical trial, several interventions show efficacy- including appointment reminders through text messages, small cash incentives for on time clinic visits, and peer health workers. Ideally, we want to improve effectiveness by assigning each patient the intervention they are most likely to benefit from, as well as improve efficiency by not allocating resources to individuals that do not need them, or would Figure 5.1: Illustration of a Dynamic Treatment Regime in a Clinical Setting This aim motivates a different type of intervention, as opposed to the static exposures we might be used to. In this chapter, we examine multiple examples of optimal individualized treatment regimes and estimate the mean outcome under the ITR where the candidate rules are restricted to depend only on user-supplied subset of the baseline covariates. In order to accomplish this, we present the tmle3mopttx R package, which features an implementation of a recently developed algorithm for computing targeted minimum loss-based estimates of a causal effect based on optimal ITR for categorical treatment. In particular, we will use tmle3mopttx to estimate optimal ITR and the corresponding population value, construct realistic optimal ITRs, and perform variable importance in terms of the mean under the optimal individualized treatment. 5.3 Data Structure and Notation Suppose we observe \\(n\\) independent and identically distributed observations of the form \\(O=(W,A,Y) \\sim P_0\\). \\(P_0 \\in \\mathcal{M}\\), where \\(\\mathcal{M}\\) is the fully nonparametric model. Denote \\(A \\in \\mathcal{A}\\) as categorical treatment, where \\(\\mathcal{A} \\equiv \\{a_1, \\ldots, a_{n_A} \\}\\) and \\(n_A = |\\mathcal{A}|\\), with \\(n_A\\) denoting the number of categories. Denote \\(Y\\) as the final outcome, and \\(W\\) a vector-valued collection of baseline covariates. The likelihood of the data admits a factorization, implied by the time ordering of \\(O\\). \\[\\begin{equation*}\\label{eqn:likelihood_factorization} p_0(O) = p_{Y,0}(Y|A,W) p_{A,0}(A|W) p_{W,0}(W) = q_{Y,0}(Y|A,W) q_{A,0}(A|W) q_{W,0}(W), \\end{equation*}\\] Consequently, we define \\(P_{Y,0}(Y|A,W)=Q_{Y,0}(Y|A,W)\\), \\(P_{A,0}(A|W)=g_0(A|W)\\) and \\(P_{W,0}(W)=Q_{W,0}(W)\\) as the corresponding conditional distributions of \\(Y\\), \\(A\\) and \\(W\\). We also define \\(\\bar{Q}_{Y,0}(A,W) \\equiv E_0[Y|A,W]\\). Finally, denote \\(V\\) as \\(V \\in W\\), defining a subset of the baseline covariates the optimal individualized rule depends on. 5.4 Defining the Causal Effect of an Optimal Individualized Intervention Consider dynamic treatment rules \\(V \\rightarrow d(V) \\in \\{a_1, \\ldots, a_{n_A} \\} \\times \\{1\\}\\), for assigning treatment \\(A\\) based on \\(V \\in W\\). Dynamic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(V)\\), and \\(Y_{d(V)}\\) is the corresponding counterfactual outcome under \\(d(V)\\). The goal of any causal analysis motivated by an optimal individualized intervention is to estimate a parameter defined as the counterfactual mean of the outcome with respect to the modified intervention distribution. Recall causal assumptions: Consistency: \\(Y^{d(v_i)}_i = Y_i\\) in the event \\(A_i = d(v_i)\\), for \\(i = 1, \\ldots, n\\). Stable unit value treatment assumption (SUTVA): \\(Y^{d(v_i)}_i\\) does not depend on \\(d(v_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference. Strong ignorability: \\(A \\perp \\!\\!\\! \\perp Y^{d(v)} \\mid W\\), for all \\(a \\in \\mathcal{A}\\). Positivity (or overlap): \\(P_0(\\min_{a \\in \\mathcal{A}} g_0(a|W) &gt; 0)=1\\) Here, we also assume non-exceptional law is in effect. We are primarily interested in the value of an individualized rule, \\[E_0[Y_{d(V)}] = E_{0,W}[\\bar{Q}_{Y,0}(A=d(V),W)].\\] The optimal rule is the rule with the maximal value: \\[d_{opt}(V) \\equiv \\text{argmax}_{d(V) \\in \\mathcal{D}} E_0[Y_{d(V)}] \\] where \\(\\mathcal{D}\\) represents the set of possible rules, \\(d\\), implied by \\(V\\). The target causal estimand of our analysis is: \\[\\psi_0 := E_0[Y_{d_{opt}(V)}] = E_{0,W}[\\bar{Q}_{Y,0}(A=d_{opt}(V),W)].\\] General, high-level idea: Learn the optimal ITR using the Super Learner. Estimate its value with the cross-validated Targeted Minimum Loss-based Estimator (CV-TMLE). 5.4.1 Why CV-TMLE? CV-TMLE is necessary as the non-cross-validated TMLE is biased upward for the mean outcome under the rule, and therefore overly optimistic. More generally however, using CV-TMLE allows us more freedom in estimation and therefore greater data adaptivity, without sacrificing inference! 5.5 Binary Treatment How do we estimate the optimal individualized treatment regime? In the case of a binary treatment, a key quantity for optimal ITR is the blip function. Optimal ITR ideally assigns treatment to individuals falling in strata in which the stratum specific average treatment effect, the blip function, is positive and does not assign treatment to individuals for which this quantity is negative. We define the blip function as: \\[\\bar{Q}_0(V) \\equiv E_0[Y_1-Y_0|V] \\equiv E_0[\\bar{Q}_{Y,0}(1,W) - \\bar{Q}_{Y,0}(0,W) | V], \\] or the average treatment effect within a stratum of \\(V\\). Optimal individualized rule can now be derived as \\(d_{opt}(V) = I(\\bar{Q}_{0}(V) &gt; 0)\\). Relying on the Targeted Maximum Likelihood (TML) estimator and the Super Learner estimate of the blip function, we follow the below steps in order to obtain value of the ITR: Estimate \\(\\bar{Q}_{Y,0}(A,W)\\) and \\(g_0(A|W)\\) using sl3. We denote such estimates as \\(\\bar{Q}_{Y,n}(A,W)\\) and \\(g_n(A|W)\\). Apply the doubly robust Augmented-Inverse Probability Weighted (A-IPW) transform to our outcome, where we define: \\[D_{\\bar{Q}_Y,g,a}(O) \\equiv \\frac{I(A=a)}{g(A|W)} (Y-\\bar{Q}_Y(A,W)) + \\bar{Q}_Y(A=a,W)\\] Note that under the randomization and positivity assumptions we have that \\(E[D_{\\bar{Q}_Y,g,a}(O) | V] = E[Y_a |V].\\) We emphasize the double robust nature of the A-IPW transform: consistency of \\(E[Y_a |V]\\) will depend on correct estimation of either \\(\\bar{Q}_{Y,0}(A,W)\\) or \\(g_0(A|W)\\). As such, in a randomized trial, we are guaranteed a consistent estimate of \\(E[Y_a |V]\\) even if we get \\(\\bar{Q}_{Y,0}(A,W)\\) wrong! Using this transform, we can define the following contrast: \\[D_{\\bar{Q}_Y,g}(O) = D_{\\bar{Q}_Y,g,a=1}(O) - D_{\\bar{Q}_Y,g,a=0}(O)\\] We estimate the blip function, \\(\\bar{Q}_{0,a}(V)\\), by regressing \\(D_{\\bar{Q}_Y,g}(O)\\) on \\(V\\) using the specified sl3 library of learners and an appropriate loss function. Our estimated rule is \\(d(V) = \\text{argmax}_{a \\in \\mathcal{A}} \\bar{Q}_{0,a}(V)\\). We obtain inference for the mean outcome under the estimated optimal rule using CV-TMLE. 5.5.1 Evaluating the Causal Effect of an optimal ITR with Binary Treatment To start, let us load the packages we will use and set a seed for simulation: library(here) library(data.table) library(sl3) library(tmle3) library(tmle3mopttx) library(devtools) set.seed(113) 5.5.1.1 Simulate Data Our data generating distribution is of the following form: \\[W \\sim \\mathcal{N}(\\bf{0},I_{3 \\times 3})\\] \\[P(A=1|W) = \\frac{1}{1+\\exp^{(-0.8*W_1)}}\\] \\[P(Y=1|A,W) = 0.5\\text{logit}^{-1}[-5I(A=1)(W_1-0.5)+5I(A=0)(W_1-0.5)] + 0.5\\text{logit}^{-1}(W_2W_3)\\] data(&quot;data_bin&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.578\\) for this data generating distribution. Next, we specify the role that each variable in the data set plays as the nodes in a DAG. # organize data and nodes for tmle3 data &lt;- data_bin node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) We now have an observed data structure (data), and a specification of the role that each variable in the data set plays as the nodes in a DAG. 5.5.1.2 Constructing Optimal Stacked Regressions with sl3 We generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression, propensity score, and the blip function. # Define sl3 library and metalearners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner: Q_learner &lt;- Lrnr_sl$new( learners = list( lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm ), metalearner = Lrnr_nnls$new() ) ## Define the g learner: g_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_100, lrn_glm), metalearner = Lrnr_nnls$new() ) ## Define the B learner: b_learner &lt;- Lrnr_sl$new( learners = list( lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm ), metalearner = Lrnr_nnls$new() ) We make the above explicit with respect to standard notation by bundling the ensemble learners into a list object below: # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) 5.5.1.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects To start, we will initialize a specification for the TMLE of our parameter of interest simply by calling tmle3_mopttx_blip_revere. We specify the argument V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;) when initializing the tmle3_Spec object in order to communicate that we’re interested in learning a rule dependent on V covariates. We also need to specify the type of blip we will use in this estimation problem, and the list of learners used to estimate relevant parts of the likelihood and the blip function. In addition, we need to specify whether we want to maximize or minimize the mean outcome under the rule (maximize=TRUE). If complex=FALSE, tmle3mopttx will consider all the possible rules under a smaller set of covariates including the static rules, and optimize the mean outcome over all the suboptimal rules dependent on \\(V\\). If realistic=TRUE, only treatments supported by the data will be considered, therefore alleviating concerns regarding practical positivity issues. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), type = &quot;blip1&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.4323512 0.5735681 0.02707012 0.5205116 0.6266245 psi_transformed lower_transformed upper_transformed 1: 0.5735681 0.5205116 0.6266245 We can see that the confidence interval covers our true mean under the true optimal individualized treatment! 5.6 Categorical Treatment QUESTION: Can we still use the blip function if the treatment is categorical? In this section, we consider how to evaluate the mean outcome under the optimal individualized treatment when \\(A\\) has more than two categories! We define pseudo-blips as vector valued entities where the output for a given \\(V\\) is a vector of length equal to the number of treatment categories, \\(n_A\\). As such, we define it as: \\[\\bar{Q}_0^{pblip}(V) = \\{\\bar{Q}_{0,a}^{pblip}(V): a \\in \\mathcal{A} \\}\\] We implement three different pseudo-blips in tmle3mopttx. Blip1 corresponds to choosing a reference category of treatment, and defining the blip for all other categories relative to the specified reference: \\[\\bar{Q}_{0,a}^{pblip-ref}(V) \\equiv E_0(Y_a-Y_0|V)\\] Blip2 approach corresponds to defining the blip relative to the average of all categories: \\[\\bar{Q}_{0,a}^{pblip-avg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_a|V)\\] Blip3 reflects an extension of Blip2, where the average is now a weighted average: \\[\\bar{Q}_{0,a}^{pblip-wavg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_{a} P(A=a|V) |V)\\] 5.6.1 Evaluating the Causal Effect of an optimal ITR with Categorical Treatment While the procedure is analogous to the previously described binary treatment, we now need to pay attention to the type of blip we define in the estimation stage, as well as how we construct our learners. 5.6.1.1 Simulated Data First, we load the simulated data. Here, our data generating distribution was of the following form: \\[W \\sim \\mathcal{N}(\\bf{0},I_{4 \\times 4})\\] \\[P(A|W) = \\frac{1}{1+\\exp^{(-(0.05*I(A=1)*W_1+0.8*I(A=2)*W_1+0.8*I(A=3)*W_1))}}\\] \\[P(Y|A,W) = 0.5\\text{logit}^{-1}[15I(A=1)(W_1-0.5) - 3I(A=2)(2W_1+0.5) \\\\ + 3I(A=3)(3W_1-0.5)] +\\text{logit}^{-1}(W_2W_1)\\] We can just load the data available as part of the package as follows: data(&quot;data_cat_realistic&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.658\\), which is the quantity we aim to estimate. # organize data and nodes for tmle3 data &lt;- data_cat_realistic node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) 5.6.1.2 Constructing Optimal Stacked Regressions with sl3 QUESTION: With categorical treatment, what is the dimension of the blip now? How would we go about estimating it? # Initialize few of the learners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: # specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial ) g_learner &lt;- make_learner(Lrnr_sl, list(lrn_xgboost_100, lrn_xgboost_500, lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm) b_learner &lt;- create_mv_learners(learners = learners) We generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression, propensity score, and the blip function. Note that we need to estimate \\(g_0(A|W)\\) for a categorical \\(A\\)- therefore we use the multinomial Super Learner option available within the sl3 package with learners that can address multi-class classification problems. In order to see which learners can be used to estimate \\(g_0(A|W)\\) in sl3, we run the following: # See which learners support multi-class classification: sl3_list_learners(c(&quot;categorical&quot;)) [1] &quot;Lrnr_bartMachine&quot; &quot;Lrnr_caret&quot; [3] &quot;Lrnr_dbarts&quot; &quot;Lrnr_gam&quot; [5] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [7] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [9] &quot;Lrnr_independent_binomial&quot; &quot;Lrnr_mean&quot; [11] &quot;Lrnr_multivariate&quot; &quot;Lrnr_optim&quot; [13] &quot;Lrnr_polspline&quot; &quot;Lrnr_pooled_hazards&quot; [15] &quot;Lrnr_randomForest&quot; &quot;Lrnr_ranger&quot; [17] &quot;Lrnr_rpart&quot; &quot;Lrnr_screener_corP&quot; [19] &quot;Lrnr_screener_corRank&quot; &quot;Lrnr_screener_randomForest&quot; [21] &quot;Lrnr_solnp&quot; &quot;Lrnr_svm&quot; [23] &quot;Lrnr_xgboost&quot; # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) 5.6.1.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.537211 0.6200541 0.07047576 0.4819241 0.7581841 psi_transformed lower_transformed upper_transformed 1: 0.6200541 0.4819241 0.7581841 # How many individuals got assigned each treatment? table(tmle_spec$return_rule) 1 2 3 439 393 168 We can see that the confidence interval covers our true mean under the true optimal individualized treatment. NOTICE the distribution of the assigned treatment! We will need this shortly. 5.7 Extensions to Causal Effect of an OIT We consider two extensions to the procedure described for estimating the value of the ITR. The first one considers a setting where the user might be interested in a grid of possible suboptimal rules, corresponding to potentially limited knowledge of potential effect modifiers (Simpler Rules). The second extension concerns implementation of realistic optimal individual interventions where certain regimes might be preferred, but due to practical or global positivity restraints are not realistic to implement (Realistic Interventions). 5.7.1 Simpler Rules In order to not only consider the most ambitious fully \\(V\\)-optimal rule, we define \\(S\\)-optimal rules as the optimal rule that considers all possible subsets of \\(V\\) covariates, with card(\\(S\\)) \\(\\leq\\) card(\\(V\\)) and \\(\\emptyset \\in S\\). This allows us to consider sub-optimal rules that are easier to estimate and potentially provide more realistic rules- as such, we allow for statistical inference for the counterfactual mean outcome under the sub-optimal rule. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = FALSE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=W4,W3,W2,W1}] 0.5608792 0.6217011 0.06338399 0.4974707 0.7459314 psi_transformed lower_transformed upper_transformed 1: 0.6217011 0.4974707 0.7459314 Even though the user specified all baseline covariates as the basis for rule estimation, a simpler rule is sufficient to maximize the mean under the optimal individualized treatment! QUESTION: Why do you think the estimate is higher under the less complex rule? How does the set of covariates picked by tmle3mopttx compare to the baseline covariates the true rule depends on? 5.7.2 Realistic Optimal Individual Regimes tmle3mopttx also provides an option to estimate the mean under the realistic, or implementable, optimal individualized treatment. It is often the case that assigning particular regime might have the ability to fully maximize (or minimize) the desired outcome, but due to global or practical positivity constrains, such treatment can never be implemented in real life (or is highly unlikely). Specifying realistic=&quot;TRUE&quot;, we consider possibly suboptimal treatments that optimize the outcome in question while being supported by the data. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = TRUE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.5550812 0.6519606 0.02163274 0.6095613 0.69436 psi_transformed lower_transformed upper_transformed 1: 0.6519606 0.6095613 0.69436 # How many individuals got assigned each treatment? table(tmle_spec$return_rule) 2 3 507 493 QUESTION: Referring back to the data-generating distribution, why do you think the distribution of allocated treatment changed from the distribution that we had under the “non-realistic” rule? 5.7.3 Variable Importance Analysis In the previous sections we have seen how to obtain a contrast between the mean under the optimal individualized rule and the mean under the observed outcome for a single covariate. We are now ready to run the variable importance analysis for all of our observed covariates! In order to run tmle3mopttx variable importance measure, we need considered covariates to be categorical variables. For illustration purpose, we bin baseline covariates corresponding to the data-generating distribution described in the previous section: # bin baseline covariates to 3 categories: data$W1 &lt;- ifelse(data$W1 &lt; quantile(data$W1)[2], 1, ifelse(data$W1 &lt; quantile(data$W1)[3], 2, 3)) node_list &lt;- list( W = c(&quot;W3&quot;, &quot;W4&quot;, &quot;W2&quot;), A = c(&quot;W1&quot;, &quot;A&quot;), Y = &quot;Y&quot; ) Note that our node list now includes \\(W_1\\) as treatments as well! Don’t worry, we will still properly adjust for all baseline covariates when considering \\(A\\) as treatment. 5.7.3.1 Variable Importance using Targeted Estimation of the value of the ITR We will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle3_mopttx_vim. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_vim( V = c(&quot;W2&quot;), type = &quot;blip2&quot;, learners = learner_list, contrast = &quot;multiplicative&quot;, maximize = FALSE, method = &quot;SL&quot;, complex = TRUE, realistic = FALSE ) # fit the TML estimator vim_results &lt;- tmle3_vim(tmle_spec, data, node_list, learner_list, adjust_for_other_A = TRUE ) print(vim_results) type param init_est tmle_est se lower 1: RR RR(E[Y_{A=NULL}]/E[Y]) -0.027031947 -0.05952178 0.05043835 -0.15837913 2: RR RR(E[Y_{A=NULL}]/E[Y]) -0.005481477 0.05210961 0.03388249 -0.01429886 upper psi_transformed lower_transformed upper_transformed A 1: 0.03933557 0.942215 0.8535261 1.040119 W1 2: 0.11851808 1.053491 0.9858029 1.125827 A W Z_stat p_nz p_nz_corrected 1: W3,W4,W2,A -1.180090 0.11898226 0.1189823 2: W3,W4,W2,W1 1.537951 0.06203031 0.1189823 The final result of tmle3_vim with the tmle3mopttx spec is an ordered list of mean outcomes under the optimal individualized treatment for all categorical covariates in our dataset. 5.8 Exercise 5.8.1 Real World Data and tmle3mopttx Finally, we cement everything we learned so far with a real data application. As in the previous sections, we will be using the WASH Benefits data, corresponding to the Effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh trial. The main aim of the cluster-randomized controlled trial was to assess the impact of six intervention groups, including: Control Handwashing with soap Improved nutrition through counselling and provision of lipid-based nutrient supplements Combined water, sanitation, handwashing, and nutrition. Improved sanitation Combined water, sanitation, and handwashing Chlorinated drinking water We aim to estimate the optimal ITR and the corresponding value under the optimal ITR for the main intervention in WASH Benefits data! Our outcome of interest is the weight-for-height Z-score, whereas our treatment is the six intervention groups aimed at improving living conditions. Questions: Define \\(V\\) as mother’s education (momedu), current living conditions (floor), and possession of material items including the refrigerator (asset_refrig). Why do you think we use these covariates as \\(V\\)? Do we want to minimize or maximize the outcome? Which blip type should we use? Construct an appropriate sl3 library for \\(A\\), \\(Y\\) and \\(B\\). Based on the \\(V\\) defined in the previous question, estimate the mean under the ITR for the main randomized intervention used in the WASH Benefits trial with weight-for-height Z-score as the outcome. What’s the TMLE value of the optimal ITR? How does it change from the initial estimate? Which intervention is the most dominant? Why do you think that is? Using the same formulation as in questions 1 and 2, estimate the realistic optimal ITR and the corresponding value of the realistic ITR. Did the results change? Which intervention is the most dominant under realistic rules? Why do you think that is? 5.9 Summary In summary, the mean outcome under the optimal individualized treatment is a counterfactual quantity of interest representing what the mean outcome would have been if everybody, contrary to the fact, received treatment that optimized their outcome. tmle3mopttx estimates the mean outcome under the optimal individualized treatment, where the candidate rules are restricted to only respond to a user-supplied subset of the baseline and intermediate covariates. In addition it provides options for realistic, data-adaptive interventions. In essence, our target parameter answers the key aim of precision medicine: allocating the available treatment by tailoring it to the individual characteristics of the patient, with the goal of optimizing the final outcome. 5.9.1 Solutions To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it: washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) As before, we specify the NPSEM via the node_list object. node_list &lt;- list( W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;tr&quot;))], A = &quot;tr&quot;, Y = &quot;whz&quot; ) We pick few potential effect modifiers, including mother’s education, current living conditions (floor), and possession of material items including the refrigerator. We concentrate of these covariates as they might be indicative of the socio-economic status of individuals involved in the trial. We can explore the distribution of our \\(V\\), \\(A\\) and \\(Y\\): # V1, V2 and V3: table(washb_data$momedu) table(washb_data$floor) table(washb_data$asset_refrig) # A: table(washb_data$tr) # Y: summary(washb_data$whz) We specify a simply library for the outcome regression, propensity score and the blip function. Since our treatment is categorical, we need to define a multinomial learner for \\(A\\) and multivariate learner for \\(B\\). We will define the xgboost over a grid of parameters, and initialize a mean learner. # Initialize few of the learners: grid_params &lt;- list( nrounds = c(100, 500), eta = c(0.01, 0.1) ) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) xgb_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_xgboost$new, c(as.list(params_tune))) }) lrn_mean &lt;- Lrnr_mean$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list( xgb_learners[[1]], xgb_learners[[2]], xgb_learners[[3]], xgb_learners[[4]], lrn_mean ), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: # specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial ) g_learner &lt;- make_learner(Lrnr_sl, list(xgb_learners[[4]], lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list( xgb_learners[[1]], xgb_learners[[2]], xgb_learners[[3]], xgb_learners[[4]], lrn_mean ) b_learner &lt;- create_mv_learners(learners = learners) learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) As seen before, we initialize the tmle3_mopttx_blip_revere Spec in order to answer Question 1. We want to maximize our outcome, with higher the weight-for-height Z-score the better. We will also use blip2 as the blip type, but note that we could have used blip1 as well since “Control” is a good reference category. ## Question 2: # Initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;momedu&quot;, &quot;floor&quot;, &quot;asset_refrig&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # Fit the TML estimator. fit &lt;- tmle3(tmle_spec, data = washb_data, node_list, learner_list) fit # Which intervention is the most dominant? table(tmle_spec$return_rule) Using the same formulation as before, we estimate the realistic optimal ITR and the corresponding value of the realistic ITR: ## Question 3: # Initialize a tmle specification with &quot;realistic=TRUE&quot;: tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;momedu&quot;, &quot;floor&quot;, &quot;asset_refrig&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = TRUE ) # Fit the TML estimator. fit &lt;- tmle3(tmle_spec, data = washb_data, node_list, learner_list) fit table(tmle_spec$return_rule) "],
["stochastic-treatment-regimes.html", "Chapter 6 Stochastic Treatment Regimes 6.1 Learning Objectives 6.2 Introduction 6.3 Stochastic Interventions 6.4 Estimating the Causal Effect of a Stochastic Intervention with tmle3shift 6.5 Stochastic Interventions over a Grid of Counterfactual Shifts 6.6 Exercises", " Chapter 6 Stochastic Treatment Regimes Nima Hejazi Based on the tmle3shift R package by Nima Hejazi, Jeremy Coyle, and Mark van der Laan. Updated: 2020-02-20 6.1 Learning Objectives Differentiate stochastic treatment regimes from static, dynamic, and optimal treatment regimes. Describe how estimating causal effects of stochastic interventions informs a real-world data analysis. Contrast a population level stochastic intervention policy from a modified treatment policy. Estimate causal effects under stochastic treatment regimes with the tmle3shift R package. Specify a grid of counterfactual shift interventions to be used for defining a set of stochastic intervention policies. Interpret a set of effect estimates from a grid of counterfactual shift interventions. Construct marginal structural models to measure variable importance in terms of stochastic interventions, using a grid of shift interventions. Implement a shift intervention at the individual level, to facilitate shifting each individual to a value that’s supported by the data. Define novel shift intervention functions to extend the tmle3shift R package. 6.2 Introduction In this section, we examine a simple example of stochastic treatment regimes in the context of a continuous treatment variable of interest, defining an intuitive causal effect through which to examine stochastic interventions more generally. As a first step to using stochastic treatment regimes in practice, we present the tmle3shift R package, which features an implementation of a recently developed algorithm for computing targeted minimum loss-based estimates of a causal effect based on a stochastic treatment regime that shifts the natural value of the treatment based on a shifting function \\(d(A,W)\\). We will also use tmle3shift to construct marginal structural models for variable importance measures, implement shift interventions at the individual level, and define novel shift intervention functions. 6.3 Stochastic Interventions Present a relatively simple yet extremely flexible manner by which realistic causal effects (and contrasts thereof) may be defined. May be applied to nearly any manner of treatment variable – continuous, ordinal, categorical, binary – allowing for a rich set of causal effects to be defined through this formalism. Arguably the most general of the classes of interventions through which causal effects may be defined, and are conceptually simple. We may consider stochastic interventions in two ways: The equation \\(f_A\\), which produces \\(A\\), is replaced by a probabilistic mechanism \\(g_{\\delta}(A \\mid W)\\) that differs from the original \\(g(A \\mid W)\\). The stochastically modified value of the treatment \\(A_{\\delta}\\) is drawn from a user-specified distribution \\(g_\\delta(A \\mid W)\\), which may depend on the original distribution \\(g(A \\mid W)\\) and is indexed by a user-specified parameter \\(\\delta\\). In this case, the stochastically modified value of the treatment \\(A_{\\delta} \\sim g_{\\delta}(\\cdot \\mid W)\\). The observed value \\(A\\) is replaced by a new value \\(A_{d(A,W)}\\) based on applying a user-defined function \\(d(A,W)\\) to \\(A\\). In this case, the stochastic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(A, W)\\), where regime \\(d\\) depends on the treatment level \\(A\\) that would be assigned in the absence of the regime as well as the covariates \\(W\\). Stochastic interventions of this variety may be referred to as depending on the natural value of treatment or as modified treatment policies (Haneuse and Rotnitzky 2013; Young, Hernán, and Robins 2014). 6.3.1 Identifying the Causal Effect of a Stochastic Intervention The stochastic intervention generates a counterfactual random variable \\(Y_{d(A,W)} := f_Y(d(A,W), W, U_Y) \\equiv Y_{g_{\\delta}} := f_Y(A_{\\delta}, W, U_Y)\\), where \\(Y_{d(A,W)} \\sim \\mathcal{P}_0^{\\delta}\\). The target causal estimand of our analysis is \\(\\psi_{0, \\delta} := \\mathbb{E}_{P_0^{\\delta}}\\{Y_{d(A,W)}\\}\\), the mean of the counterfactual outcome variable \\(Y_{d(A, W)}\\). The statistical target parameter may also be denoted \\(\\Psi(P_0) = \\mathbb{E}_{P_0}{\\overline{Q}(d(A, W), W)}\\), where \\(\\overline{Q}(d(A, W), W)\\) is the counterfactual outcome value of a given individual under the stochastic intervention distribution (Díaz and van der Laan 2018). In prior work, Díaz and van der Laan (2012) showed that the causal quantity of interest \\(\\mathbb{E}_0 \\{Y_{d(A, W)}\\}\\) is identified by a functional of the distribution of \\(O\\): \\[\\begin{align*}\\label{eqn:identification2012} \\psi_{0,d} = \\int_{\\mathcal{W}} \\int_{\\mathcal{A}} &amp; \\mathbb{E}_{P_0} \\{Y \\mid A = d(a, w), W = w\\} \\cdot \\\\ &amp;q_{0, A}^O(a \\mid W = w) \\cdot q_{0, W}^O(w) d\\mu(a)d\\nu(w). \\end{align*}\\] The four standard assumptions presented in are necessary in order to establish identifiability of the causal parameter from the observed data via the statistical functional. These were Consistency: \\(Y^{d(a_i, w_i)}_i = Y_i\\) in the event \\(A_i = d(a_i, w_i)\\), for \\(i = 1, \\ldots, n\\) Stable unit value treatment assumption (SUTVA): \\(Y^{d(a_i, w_i)}_i\\) does not depend on \\(d(a_j, w_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference (Rubin 1978, 1980). Strong ignorability: \\(A_i \\perp \\!\\!\\! \\perp Y^{d(a_i, w_i)}_i \\mid W_i\\), for \\(i = 1, \\ldots, n\\). Positivity (or overlap): \\(a_i \\in \\mathcal{A} \\implies d(a_i, w_i) \\in \\mathcal{A}\\) for all \\(w \\in \\mathcal{W}\\), where \\(\\mathcal{A}\\) denotes the support of \\(A \\mid W = w_i \\quad \\forall i = 1, \\ldots n\\). With the identification assumptions satisfied, Díaz and van der Laan (2012) and Díaz and van der Laan (2018) provide an efficient influence function with respect to the nonparametric model \\(\\mathcal{M}\\) as \\[\\begin{equation*}\\label{eqn:eif} D(P_0)(x) = H(a, w)({y - \\overline{Q}(a, w)}) + \\overline{Q}(d(a, w), w) - \\Psi(P_0), \\end{equation*}\\] where the auxiliary covariate \\(H(a,w)\\) may be expressed \\[\\begin{equation*}\\label{eqn:aux_covar_full} H(a,w) = \\mathbb{I}(a + \\delta &lt; u(w)) \\frac{g_0(a - \\delta \\mid w)} {g_0(a \\mid w)} + \\mathbb{I}(a + \\delta \\geq u(w)), \\end{equation*}\\] which may be reduced to \\[\\begin{equation*}\\label{eqn:aux_covar_simple} H(a,w) = \\frac{g_0(a - \\delta \\mid w)}{g_0(a \\mid w)} + 1 \\end{equation*}\\] in the case that the treatment is in the limits that arise from conditioning on \\(W\\), i.e., for \\(A_i \\in (u(w) - \\delta, u(w))\\). 6.3.2 Interpreting the Causal Effect of a Stochastic Intervention Figure 6.1: Animation of how a counterfactual outcome changes as the natural treatment distribution is subjected to a simple stochastic intervention 6.4 Estimating the Causal Effect of a Stochastic Intervention with tmle3shift We use tmle3shift to construct a targeted maximum likelihood (TML) estimator of of a causal effect of a stochastic treatment regime that shifts the natural value of the treatment based on a shifting function \\(d(A,W)\\). We will follow the recipe provided by Díaz and van der Laan (2018), tailored to the tmle3 framework: Construct initial estimators \\(g_n\\) of \\(g_0(A, W)\\) and \\(Q_n\\) of \\(\\overline{Q}_0(A, W)\\), perhaps using data-adaptive regression techniques. For each observation \\(i\\), compute an estimate \\(H_n(a_i, w_i)\\) of the auxiliary covariate \\(H(a_i,w_i)\\). Estimate the parameter \\(\\epsilon\\) in the logistic regression model \\[ \\text{logit}\\overline{Q}_{\\epsilon, n}(a, w) = \\text{logit}\\overline{Q}_n(a, w) + \\epsilon H_n(a, w),\\] or an alternative regression model incorporating weights. Compute TML estimator \\(\\Psi_n\\) of the target parameter, defining update \\(\\overline{Q}_n^{\\star}\\) of the initial estimate \\(\\overline{Q}_{n, \\epsilon_n}\\): \\[\\begin{equation*}\\label{eqn:tmle} \\Psi_n = \\Psi(P_n^{\\star}) = \\frac{1}{n} \\sum_{i = 1}^n \\overline{Q}_n^{\\star}(d(A_i, W_i), W_i). \\end{equation*}\\] To start, let’s load the packages we’ll use and set a seed for simulation: library(tidyverse) library(data.table) library(condensier) library(sl3) library(tmle3) library(tmle3shift) set.seed(429153) 1. Construct initial estimators \\(g_n\\) of \\(g_0(A, W)\\) and \\(Q_n\\) of \\(\\overline{Q}_0(A, W)\\). We need to estimate two components of the likelihood in order to construct a TML estimator. The outcome regression, \\(\\hat{Q}_n\\), which is a simple regression of the form \\(\\mathbb{E}[Y \\mid A,W]\\). # learners used for conditional expectation regression lrn_mean &lt;- Lrnr_mean$new() lrn_fglm &lt;- Lrnr_glm_fast$new() lrn_xgb &lt;- Lrnr_xgboost$new(nrounds = 200) sl_lrn &lt;- Lrnr_sl$new( learners = list(lrn_mean, lrn_fglm, lrn_xgb), metalearner = Lrnr_nnls$new() ) The treatment mechanism, \\(\\hat{g}_n\\), i.e., the propensity score. In the case of a continuous intervention, such a quantity is a conditional density. Generally speaking, conditional density estimation is a challenging problem that has received much attention in the literature. To estimate the treatment mechanism, we must make use of learning algorithms specifically suited to conditional density estimation; a list of such learners may be extracted from sl3 by using sl3_list_learners(): sl3_list_learners(&quot;density&quot;) [1] &quot;Lrnr_condensier&quot; &quot;Lrnr_density_discretize&quot; [3] &quot;Lrnr_density_hse&quot; &quot;Lrnr_density_semiparametric&quot; [5] &quot;Lrnr_haldensify&quot; &quot;Lrnr_rfcde&quot; [7] &quot;Lrnr_solnp_density&quot; To proceed, we’ll select two of the above learners, Lrnr_haldensify for using the highly adaptive lasso for conditional density estimation, based on an algorithm given by Díaz and van der Laan (2011) and implemented in Hejazi and Benkeser (2019), and Lrnr_rfcde, an approach for using random forests for conditional density estimation (Pospisil and Lee 2018). A Super Learner may be constructed by pooling estimates from each of these modified conditional density regression techniques. # learners used for conditional density regression (i.e., propensity score) lrn_haldensify &lt;- Lrnr_haldensify$new( n_bins = 5, grid_type = &quot;equal_mass&quot;, lambda_seq = exp(seq(-1, -13, length = 500)) ) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 1000, node_size = 5, n_basis = 31, output_type = &quot;observed&quot; ) sl_lrn_dens &lt;- Lrnr_sl$new( learners = list(lrn_haldensify, lrn_rfcde), metalearner = Lrnr_solnp_density$new() ) Finally, we construct a learner_list object for use in constructing a TML estimator of our target parameter of interest: Q_learner &lt;- sl_lrn g_learner &lt;- sl_lrn_dens learner_list &lt;- list(Y = Q_learner, A = g_learner) 6.4.1 Simulate Data # simulate simple data for tmle-shift sketch n_obs &lt;- 1000 # number of observations tx_mult &lt;- 2 # multiplier for the effect of W = 1 on the treatment ## baseline covariates -- simple, binary W &lt;- replicate(2, rbinom(n_obs, 1, 0.5)) ## create treatment based on baseline W A &lt;- rnorm(n_obs, mean = tx_mult * W, sd = 1) ## create outcome as a linear function of A, W + white noise Y &lt;- rbinom(n_obs, 1, prob = plogis(A + W)) # organize data and nodes for tmle3 data &lt;- data.table(W, A, Y) setnames(data, c(&quot;W1&quot;, &quot;W2&quot;, &quot;A&quot;, &quot;Y&quot;)) node_list &lt;- list(W = c(&quot;W1&quot;, &quot;W2&quot;), A = &quot;A&quot;, Y = &quot;Y&quot;) head(data) W1 W2 A Y 1: 1 1 3.5806529 1 2: 1 0 3.2071846 1 3: 1 1 1.0358382 1 4: 0 0 -0.6578495 1 5: 1 1 3.0199033 1 6: 1 1 2.7803127 1 We now have an observed data structure (data) and a specification of the role that each variable in the data set plays as the nodes in a directed acyclic graph (DAG) via nonparametric structural equation models (NPSEMs). To start, we will initialize a specification for the TMLE of our parameter of interest (a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_val = 0.5 when initializing the tmle3_Spec object to communicate that we’re interested in a shift of \\(0.5\\) on the scale of the treatment \\(A\\) – that is, we specify \\(\\delta = 0.5\\). # initialize a tmle specification tmle_spec &lt;- tmle_shift( shift_val = 0.5, shift_fxn = shift_additive_bounded, shift_fxn_inv = shift_additive_bounded_inv ) As seen above, the tmle_shift specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally (see the tmle3 documentation for details). Note that in the initialization of the tmle3_Spec, we specified a shifting function shift_additive_bounded (and its inverse). This shifting function corresponds to a stochastic regime slightly more complicated than that initially considered in Díaz and van der Laan (2018). In particular, shift_additive_bounded is encapsulates a procedure that determines an acceptable set of shifting values for the shift \\(\\delta\\), allowing for the observed treatment value of a given observation to be shifted if the auxiliary covariate \\(H_n\\) is bounded by a constant and not shifting the given observation if this criterion does not hold. We discuss this in greater detail in the sequel. 6.4.2 Targeted Estimation of Stochastic Interventions Effects tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 1374.1995 Pars: 0.80304 0.19696 Iter: 2 fn: 1374.1995 Pars: 0.80305 0.19695 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.7960793 0.7974222 0.0123067 0.7733015 0.8215428 psi_transformed lower_transformed upper_transformed 1: 0.7974222 0.7733015 0.8215428 The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.5 Stochastic Interventions over a Grid of Counterfactual Shifts Consider an arbitrary scalar \\(\\delta\\) that defines a counterfactual outcome \\(\\psi_n = Q_n(d(A, W), W)\\), where, for simplicity, let \\(d(A, W) = A + \\delta\\). A simplified expression of the auxiliary covariate for the TMLE of \\(\\psi\\) is \\(H_n = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)}\\), where \\(g^{\\star}(a \\mid w)\\) defines the treatment mechanism with the stochastic intervention implemented. In this manner, we can specify a grid of shifts \\(\\delta\\) to define a set of stochastic intervention policies in an a priori manner. To ascertain whether a given choice of the shift \\(\\delta\\) is acceptable, let there be a bound \\(C(\\delta) = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)} \\leq M\\), where \\(g^{\\star}(a \\mid w)\\) is a function of \\(\\delta\\) in part, and \\(M\\) is a user-specified upper bound of \\(C(\\delta)\\). Then, \\(C(\\delta)\\) is a measure of the influence of a given observation (under a bound of the ratio of the conditional densities), which provides a way to limit the maximum influence of a given observation through a choice of the shift \\(\\delta\\). For the purpose of using such a shift in practice, the present software provides the functions shift_additive_bounded and shift_additive_bounded_inv, which define a variation of this shift: \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; C(\\delta) \\leq M \\\\ 0, \\text{otherwise} \\\\ \\end{cases}, \\end{equation}\\] which corresponds to an intervention in which the natural value of treatment of a given observational unit is shifted by a value \\(\\delta\\) in the case that the ratio of the intervened density \\(g^{\\star}(a \\mid w)\\) to the natural density \\(g(a \\mid w)\\) (that is, \\(C(\\delta)\\)) does not exceed a bound \\(M\\). In the case that the ratio \\(C(\\delta)\\) exceeds the bound \\(M\\), the stochastic intervention policy does not apply to the given unit and they remain at their natural value of treatment \\(a\\). 6.5.1 Initializing vimshift through its tmle3_Spec To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_grid = seq(-1, 1, by = 1) when initializing the tmle3_Spec object to communicate that we’re interested in assessing the mean counterfactual outcome over a grid of shifts -1, 0, 1 on the scale of the treatment \\(A\\). # what&#39;s the grid of shifts we wish to consider? delta_grid &lt;- seq(from = -1, to = 1, by = 1) # initialize a tmle specification tmle_spec &lt;- tmle_vimshift_delta( shift_grid = delta_grid, max_shifted_ratio = 2 ) 6.5.2 Targeted Estimation of Stochastic Intervention Effects One may walk through the step-by-step procedure for fitting the TML estimator of the mean counterfactual outcome under each shift in the grid, using the machinery exposed by the tmle3 R package, or simply invoke the tmle3 wrapper function to fit the series of TML estimators (one for each parameter defined by the grid delta) in a single function call. For convenience, we choose the latter: tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 1373.0703 Pars: 0.80442 0.19558 Iter: 2 fn: 1373.0703 Pars: 0.80442 0.19558 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] 0.6280483 0.6287278 0.014068504 0.60115409 2: TSM E[Y_{A=NULL}] 0.7383694 0.7390000 0.013895038 0.71176623 3: TSM E[Y_{A=NULL}] 0.8422266 0.8437742 0.010209010 0.82376490 4: MSM_linear MSM(intercept) 0.7362148 0.7371673 0.012186190 0.71328285 5: MSM_linear MSM(slope) 0.1070891 0.1075232 0.004345899 0.09900537 upper psi_transformed lower_transformed upper_transformed 1: 0.6563016 0.6287278 0.60115409 0.6563016 2: 0.7662338 0.7390000 0.71176623 0.7662338 3: 0.8637835 0.8437742 0.82376490 0.8637835 4: 0.7610518 0.7371673 0.71328285 0.7610518 5: 0.1160410 0.1075232 0.09900537 0.1160410 Remark: The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.5.3 Inference with Marginal Structural Models Since we consider estimating the mean counterfactual outcome \\(\\psi_n\\) under several values of the intervention \\(\\delta\\), taken from the aforementioned \\(\\delta\\)-grid, one approach for obtaining inference on a single summary measure of these estimated quantities involves leveraging working marginal structural models (MSMs). Summarizing the estimates \\(\\psi_n\\) through a working MSM allows for inference on the trend imposed by a \\(\\delta\\)-grid to be evaluated via a simple hypothesis test on a parameter of this working MSM. Letting \\(\\psi_{\\delta}(P_0)\\) be the mean outcome under a shift \\(\\delta\\) of the treatment, we have \\(\\vec{\\psi}_{\\delta} = (\\psi_{\\delta}: \\delta)\\) with corresponding estimators \\(\\vec{\\psi}_{n, \\delta} = (\\psi_{n, \\delta}: \\delta)\\). Further, let \\(\\beta(\\vec{\\psi}_{\\delta}) = \\phi((\\psi_{\\delta}: \\delta))\\). By a straightforward application of the delta method (discussed previously), we may write the efficient influence function of the MSM parameter \\(\\beta\\) in terms of the EIFs of each of the corresponding point estimates. Based on this, inference from a working MSM is rather straightforward. To wit, the limiting distribution for \\(m_{\\beta}(\\delta)\\) may be expressed \\[\\sqrt{n}(\\beta_n - \\beta_0) \\to N(0, \\Sigma),\\] where \\(\\Sigma\\) is the empirical covariance matrix of \\(\\text{EIF}_{\\beta}(O)\\). tmle_fit$summary[4:5, ] type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.7362148 0.7371673 0.012186190 0.71328285 2: MSM_linear MSM(slope) 0.1070891 0.1075232 0.004345899 0.09900537 upper psi_transformed lower_transformed upper_transformed 1: 0.7610518 0.7371673 0.71328285 0.7610518 2: 0.1160410 0.1075232 0.09900537 0.1160410 6.5.4 Directly Targeting the MSM Parameter \\(\\beta\\) Note that in the above, a working MSM is fit to the individual TML estimates of the mean counterfactual outcome under a given value of the shift \\(\\delta\\) in the supplied grid. The parameter of interest \\(\\beta\\) of the MSM is asymptotically linear (and, in fact, a TML estimator) as a consequence of its construction from individual TML estimators. In smaller samples, it may be prudent to perform a TML estimation procedure that targets the parameter \\(\\beta\\) directly, as opposed to constructing it from several independently targeted TML estimates. An approach for constructing such an estimator is proposed in the sequel. Suppose a simple working MSM \\(\\mathbb{E}Y_{g^0_{\\delta}} = \\beta_0 + \\beta_1 \\delta\\), then a TML estimator targeting \\(\\beta_0\\) and \\(\\beta_1\\) may be constructed as \\[\\overline{Q}_{n, \\epsilon}(A,W) = \\overline{Q}_n(A,W) + \\epsilon (H_1(g), H_2(g),\\] for all \\(\\delta\\), where \\(H_1(g)\\) is the auxiliary covariate for \\(\\beta_0\\) and \\(H_2(g)\\) is the auxiliary covariate for \\(\\beta_1\\). To construct a targeted maximum likelihood estimator that directly targets the parameters of the working marginal structural model, we may use the tmle_vimshift_msm Spec (instead of the tmle_vimshift_delta Spec that appears above): # initialize a tmle specification tmle_msm_spec &lt;- tmle_vimshift_msm( shift_grid = delta_grid, max_shifted_ratio = 2 ) # fit the TML estimator and examine the results tmle_msm_fit &lt;- tmle3(tmle_msm_spec, data, node_list, learner_list) Iter: 1 fn: 1379.3111 Pars: 0.78629 0.21371 Iter: 2 fn: 1379.3111 Pars: 0.78629 0.21371 solnp--&gt; Completed in 2 iterations tmle_msm_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.7369796 0.7370738 0.012221155 0.71312081 2: MSM_linear MSM(slope) 0.1081239 0.1081989 0.004390133 0.09959438 upper psi_transformed lower_transformed upper_transformed 1: 0.7610269 0.7370738 0.71312081 0.7610269 2: 0.1168034 0.1081989 0.09959438 0.1168034 6.5.5 Example with the WASH Benefits Data To complete our walk through, let’s turn to using stochastic interventions to investigate the data from the WASH Benefits trial. To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data_subset.csv&quot;, stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage) &amp; !is.na(momheight), ] head(washb_data, 3) whz tr fracode month aged sex momage momedu momheight 1: -0.94 Handwashing N06505 7 237 male 21 Primary (1-5y) 146.00 2: -1.13 Control N06505 8 310 female 26 No education 148.90 3: -1.61 Control N06524 3 162 male 25 Primary (1-5y) 153.75 hfiacat Nlt18 Ncomp watmin elec floor walls roof asset_wardrobe 1: Food Secure 1 25 2 1 0 1 1 0 2: Food Secure 1 7 4 1 0 0 1 0 3: Food Secure 0 15 2 0 0 1 1 0 asset_table asset_chair asset_khat asset_chouki asset_tv asset_refrig 1: 1 0 0 1 0 0 2: 1 1 0 1 0 0 3: 1 0 1 1 0 0 asset_bike asset_moto asset_sewmach asset_mobile 1: 0 0 0 0 2: 0 0 0 1 3: 0 0 0 0 Next, we specify our NPSEM via the node_list object. For our example analysis, we’ll consider the outcome to be the weight-for-height Z-score (as in previous sections), the intervention of interest to be the mother’s age at time of child’s birth, and take all other covariates to be potential confounders. node_list &lt;- list( W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;momage&quot;))], A = &quot;momage&quot;, Y = &quot;whz&quot; ) Were we to consider the counterfactual weight-for-height Z-score under shifts in the age of the mother at child’s birth, how would we interpret estimates of our parameter? To simplify our interpretation, consider a shift (up or down) of two years in the mother’s age (i.e., \\(\\delta = \\{-2, 0, 2\\}\\)); in this setting, a stochastic intervention would correspond to a policy advocating that potential mothers defer or accelerate plans of having a child for two calendar years, possibly implemented through the deployment of an encouragement design. First, let’s try a simple upward shift of just two years: # initialize a tmle specification for just a single delta shift washb_shift_spec &lt;- tmle_shift( shift_val = 2, shift_fxn = shift_additive, shift_fxn_inv = shift_additive_inv ) To examine the effect modification approach we looked at in previous chapters, we’ll estimate the effect of this shift \\(\\delta = 2\\) while stratifying on the mother’s education level (momedu, a categorical variable with three levels). For this, we augment our initialized tmle3_Spec object like so # initialize effect modification specification around previous specification washb_shift_strat_spec &lt;- tmle_stratified(washb_shift_spec, &quot;momedu&quot;) Prior to running our analysis, we’ll modify the learner_list object we had created such that the density estimation procedure we rely on will be only the random forest conditional density estimation procedure of Pospisil and Lee (2018), as the nonparametric conditional density approach based on the highly adaptive lasso (Díaz and van der Laan 2011; Benkeser and van der Laan 2016; Coyle and Hejazi 2018; Hejazi and Benkeser 2019) is currently unable to accommodate large datasets. # learners used for conditional density regression (i.e., propensity score) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 1000, node_size = 5, n_basis = 31, output_type = &quot;observed&quot; ) # we need to turn on cross-validation for the RFCDE learner lrn_cv_rfcde &lt;- Lrnr_cv$new( learner = lrn_rfcde, full_fit = TRUE ) # modify learner list, using existing SL for Q fit learner_list &lt;- list(Y = sl_lrn, A = lrn_cv_rfcde) Now we’re ready to construct a TML estimate of the shift parameter at \\(\\delta = 2\\), stratified across levels of our variable of interest: # fit stratified TMLE washb_shift_strat_fit &lt;- tmle3(washb_shift_strat_spec, washb_data, node_list, learner_list) washb_shift_strat_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: TSM E[Y_{A=NULL}] -0.5727451 -0.5751188 2: stratified TSM E[Y_{A=NULL}] | V=Primary (1-5y) -0.6115883 -0.6317706 3: stratified TSM E[Y_{A=NULL}] | V=No education -0.6572430 -0.8960070 4: stratified TSM E[Y_{A=NULL}] | V=Secondary (&gt;5y) -0.5240929 -0.4467044 se lower upper psi_transformed lower_transformed 1: 0.05464800 -0.6822269 -0.4680107 -0.5751188 -0.6822269 2: 0.09680694 -0.8215088 -0.4420325 -0.6317706 -0.8215088 3: 0.15923922 -1.2081101 -0.5839038 -0.8960070 -1.2081101 4: 0.07049364 -0.5848694 -0.3085395 -0.4467044 -0.5848694 upper_transformed 1: -0.4680107 2: -0.4420325 3: -0.5839038 4: -0.3085395 For the next example, we’ll use the variable importance strategy of considering a grid of stochastic interventions to evaluate the weight-for-height Z-score under a shift in the mother’s age down by two years (\\(\\delta = -2\\)) through up by two years (\\(\\delta = 2\\)), incrementing by a single year between the two. To do this, we simply initialize a Spec tmle_vimshift_delta similar to how we did in a previous example: # initialize a tmle specification for the variable importance parameter washb_vim_spec &lt;- tmle_vimshift_delta( shift_grid = seq(from = -2, to = 2, by = 1), max_shifted_ratio = 2 ) Having made the above preparations, we’re now ready to estimate the counterfactual mean of the weight-for-height Z-score under a small grid of shifts in the mother’s age at child’s birth. Just as before, we do this through a simple call to our tmle3 wrapper function: washb_tmle_fit &lt;- tmle3(washb_vim_spec, washb_data, node_list, learner_list) washb_tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] -0.561264651 -0.5663829566 0.042722284 -0.65011709 2: TSM E[Y_{A=NULL}] -0.563519870 -0.5423433812 0.044987802 -0.63051785 3: TSM E[Y_{A=NULL}] -0.565784275 -0.5652941176 0.046631440 -0.65669006 4: TSM E[Y_{A=NULL}] -0.568048680 -0.5376267806 0.047778738 -0.63127139 5: TSM E[Y_{A=NULL}] -0.570313085 -0.5668725466 0.047631109 -0.66022780 6: MSM_linear MSM(intercept) -0.565786112 -0.5557039565 0.044279256 -0.64248970 7: MSM_linear MSM(slope) -0.002262568 0.0003737421 0.007073156 -0.01348939 upper psi_transformed lower_transformed upper_transformed 1: -0.48264882 -0.5663829566 -0.65011709 -0.48264882 2: -0.45416891 -0.5423433812 -0.63051785 -0.45416891 3: -0.47389818 -0.5652941176 -0.65669006 -0.47389818 4: -0.44398217 -0.5376267806 -0.63127139 -0.44398217 5: -0.47351729 -0.5668725466 -0.66022780 -0.47351729 6: -0.46891821 -0.5557039565 -0.64248970 -0.46891821 7: 0.01423687 0.0003737421 -0.01348939 0.01423687 6.6 Exercises Set the sl3 library of algorithms for the Super Learner to a simple, interpretable library and use this new library to estimate the counterfactual mean of mother’s age at child’s birth (momage) under a shift \\(\\delta = 0\\). What does this counterfactual mean equate to in terms of the observed data? Describe two (equivalent) ways in which the causal effects of stochastic interventions may be interpreted. Using a grid of values of the shift parameter \\(\\delta\\) (e.g., \\(\\{-1, 0, +1\\}\\)), repeat the analysis on the variable of interest (momage), summarizing the trend for this sequence of shifts using a marginal structural model. For either the grid of shifts in the example preceding the exercises or that estimated in (3) above, plot the resultant estimates against their respective counterfactual shifts. Graphically add to the scatterplot a line with slope and intercept equivalent to the MSM fit through the individual TML estimates. How does the marginal structural model we used to summarize the trend along the sequence of shifts previously help to contextualize the estimated effect for a single shift? That is, how does access to estimates across several shifts and the marginal structural model parameters allow us to more richly interpret our findings? References "],
["r6.html", "Chapter 7 A Primer on the R6 Class System 7.1 Classes, Fields, and Methods 7.2 Object Oriented Programming: Python and R", " Chapter 7 A Primer on the R6 Class System A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models. The tlverse is designed using basic OOP principles and the R6 OOP framework. While we’ve tried to make it easy to use the tlverse packages without worrying much about OOP, it is helpful to have some intuition about how the tlverse is structured. Here, we briefly outline some key concepts from OOP. Readers familiar with OOP basics are invited to skip this section. 7.1 Classes, Fields, and Methods The key concept of OOP is that of an object, a collection of data and functions that corresponds to some conceptual unit. Objects have two main types of elements: fields, which can be thought of as nouns, are information about an object, and methods, which can be thought of as verbs, are actions an object can perform. Objects are members of classes, which define what those specific fields and methods are. Classes can inherit elements from other classes (sometimes called base classes) – accordingly, classes that are similar, but not exactly the same, can share some parts of their definitions. Many different implementations of OOP exist, with variations in how these concepts are implemented and used. R has several different implementations, including S3, S4, reference classes, and R6. The tlverse uses the R6 implementation. In R6, methods and fields of a class object are accessed using the $ operator. For a more thorough introduction to R6, see https://adv-r.hadley.nz/r6.html, from Hadley Wickham’s Advanced R (Wickham 2014). 7.2 Object Oriented Programming: Python and R OO concepts (classes with inherentence) were baked into Python from the first published version (version 0.9 in 1991). In contrast, R gets its OO “approach” from its predecessor, S, first released in 1976. For the first 15 years, S had no support for classes, then, suddenly, S got two OO frameworks bolted on in rapid succession: informal classes with S3 in 1991, and formal classes with S4 in 1998. This process continues, with new OO frameworks being periodically released, to try to improve the lackluster OO support in R, with reference classes (R5, 2010) and R6 (2014). Of these, R6 behaves most like Python classes (and also most like OOP focused languages like C++ and Java), including having method definitions be part of class definitions, and allowing objects to be modified by reference. References "],
["references.html", "References", " References "]
]
